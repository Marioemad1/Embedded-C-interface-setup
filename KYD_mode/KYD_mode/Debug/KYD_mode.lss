
KYD_mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000068c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000068c  00000700  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000740  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014ae  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000856  00000000  00000000  00001d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009e3  00000000  00000000  00002580  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00002f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000527  00000000  00000000  00003174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c58  00000000  00000000  0000369b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000042f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 06 03 	call	0x60c	; 0x60c <main>
  7a:	0c 94 44 03 	jmp	0x688	; 0x688 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPinDirection>:
		{
			DDRD=0xff;
		}
		else if(DIO_PORT_INPUT==PortDirection)
		{
			DDRD=0x00;
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	11 f1       	breq	.+68     	; 0xca <DIO_SetPinDirection+0x48>
  86:	30 f0       	brcs	.+12     	; 0x94 <DIO_SetPinDirection+0x12>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	d1 f1       	breq	.+116    	; 0x100 <DIO_SetPinDirection+0x7e>
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	09 f4       	brne	.+2      	; 0x92 <DIO_SetPinDirection+0x10>
  90:	52 c0       	rjmp	.+164    	; 0x136 <DIO_SetPinDirection+0xb4>
  92:	08 95       	ret
  94:	41 30       	cpi	r20, 0x01	; 1
  96:	59 f4       	brne	.+22     	; 0xae <DIO_SetPinDirection+0x2c>
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_SetPinDirection+0x22>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_SetPinDirection+0x1e>
  a8:	82 2b       	or	r24, r18
  aa:	8a bb       	out	0x1a, r24	; 26
  ac:	08 95       	ret
  ae:	41 11       	cpse	r20, r1
  b0:	5c c0       	rjmp	.+184    	; 0x16a <DIO_SetPinDirection+0xe8>
  b2:	2a b3       	in	r18, 0x1a	; 26
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPinDirection+0x3c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPinDirection+0x38>
  c2:	80 95       	com	r24
  c4:	82 23       	and	r24, r18
  c6:	8a bb       	out	0x1a, r24	; 26
  c8:	08 95       	ret
  ca:	41 30       	cpi	r20, 0x01	; 1
  cc:	59 f4       	brne	.+22     	; 0xe4 <DIO_SetPinDirection+0x62>
  ce:	27 b3       	in	r18, 0x17	; 23
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_SetPinDirection+0x58>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_SetPinDirection+0x54>
  de:	82 2b       	or	r24, r18
  e0:	87 bb       	out	0x17, r24	; 23
  e2:	08 95       	ret
  e4:	41 11       	cpse	r20, r1
  e6:	41 c0       	rjmp	.+130    	; 0x16a <DIO_SetPinDirection+0xe8>
  e8:	27 b3       	in	r18, 0x17	; 23
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_SetPinDirection+0x72>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_SetPinDirection+0x6e>
  f8:	80 95       	com	r24
  fa:	82 23       	and	r24, r18
  fc:	87 bb       	out	0x17, r24	; 23
  fe:	08 95       	ret
 100:	41 30       	cpi	r20, 0x01	; 1
 102:	59 f4       	brne	.+22     	; 0x11a <DIO_SetPinDirection+0x98>
 104:	24 b3       	in	r18, 0x14	; 20
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_SetPinDirection+0x8e>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_SetPinDirection+0x8a>
 114:	82 2b       	or	r24, r18
 116:	84 bb       	out	0x14, r24	; 20
 118:	08 95       	ret
 11a:	41 11       	cpse	r20, r1
 11c:	26 c0       	rjmp	.+76     	; 0x16a <DIO_SetPinDirection+0xe8>
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDirection+0xa8>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDirection+0xa4>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
 136:	41 30       	cpi	r20, 0x01	; 1
 138:	59 f4       	brne	.+22     	; 0x150 <DIO_SetPinDirection+0xce>
 13a:	21 b3       	in	r18, 0x11	; 17
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_SetPinDirection+0xc4>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_SetPinDirection+0xc0>
 14a:	82 2b       	or	r24, r18
 14c:	81 bb       	out	0x11, r24	; 17
 14e:	08 95       	ret
 150:	41 11       	cpse	r20, r1
 152:	0b c0       	rjmp	.+22     	; 0x16a <DIO_SetPinDirection+0xe8>
 154:	21 b3       	in	r18, 0x11	; 17
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_SetPinDirection+0xde>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_SetPinDirection+0xda>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	81 bb       	out	0x11, r24	; 17
 16a:	08 95       	ret

0000016c <DIO_GetPin>:
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	b1 f0       	breq	.+44     	; 0x19c <DIO_GetPin+0x30>
 170:	28 f0       	brcs	.+10     	; 0x17c <DIO_GetPin+0x10>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	19 f1       	breq	.+70     	; 0x1bc <DIO_GetPin+0x50>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	89 f1       	breq	.+98     	; 0x1dc <DIO_GetPin+0x70>
 17a:	08 95       	ret
 17c:	89 b3       	in	r24, 0x19	; 25
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_GetPin+0x1a>
 182:	95 95       	asr	r25
 184:	87 95       	ror	r24
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_GetPin+0x16>
 18a:	80 ff       	sbrs	r24, 0
 18c:	04 c0       	rjmp	.+8      	; 0x196 <DIO_GetPin+0x2a>
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	fa 01       	movw	r30, r20
 192:	80 83       	st	Z, r24
 194:	08 95       	ret
 196:	fa 01       	movw	r30, r20
 198:	10 82       	st	Z, r1
 19a:	08 95       	ret
 19c:	86 b3       	in	r24, 0x16	; 22
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_GetPin+0x3a>
 1a2:	95 95       	asr	r25
 1a4:	87 95       	ror	r24
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_GetPin+0x36>
 1aa:	80 ff       	sbrs	r24, 0
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <DIO_GetPin+0x4a>
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	fa 01       	movw	r30, r20
 1b2:	80 83       	st	Z, r24
 1b4:	08 95       	ret
 1b6:	fa 01       	movw	r30, r20
 1b8:	10 82       	st	Z, r1
 1ba:	08 95       	ret
 1bc:	83 b3       	in	r24, 0x13	; 19
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_GetPin+0x5a>
 1c2:	95 95       	asr	r25
 1c4:	87 95       	ror	r24
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_GetPin+0x56>
 1ca:	80 ff       	sbrs	r24, 0
 1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <DIO_GetPin+0x6a>
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	fa 01       	movw	r30, r20
 1d2:	80 83       	st	Z, r24
 1d4:	08 95       	ret
 1d6:	fa 01       	movw	r30, r20
 1d8:	10 82       	st	Z, r1
 1da:	08 95       	ret
 1dc:	80 b3       	in	r24, 0x10	; 16
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_GetPin+0x7a>
 1e2:	95 95       	asr	r25
 1e4:	87 95       	ror	r24
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_GetPin+0x76>
 1ea:	80 ff       	sbrs	r24, 0
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <DIO_GetPin+0x8a>
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	fa 01       	movw	r30, r20
 1f2:	80 83       	st	Z, r24
 1f4:	08 95       	ret
 1f6:	fa 01       	movw	r30, r20
 1f8:	10 82       	st	Z, r1
 1fa:	08 95       	ret

000001fc <DIO_SetPin>:
 1fc:	81 30       	cpi	r24, 0x01	; 1
 1fe:	11 f1       	breq	.+68     	; 0x244 <DIO_SetPin+0x48>
 200:	30 f0       	brcs	.+12     	; 0x20e <DIO_SetPin+0x12>
 202:	82 30       	cpi	r24, 0x02	; 2
 204:	d1 f1       	breq	.+116    	; 0x27a <DIO_SetPin+0x7e>
 206:	83 30       	cpi	r24, 0x03	; 3
 208:	09 f4       	brne	.+2      	; 0x20c <DIO_SetPin+0x10>
 20a:	52 c0       	rjmp	.+164    	; 0x2b0 <DIO_SetPin+0xb4>
 20c:	08 95       	ret
 20e:	41 30       	cpi	r20, 0x01	; 1
 210:	59 f4       	brne	.+22     	; 0x228 <DIO_SetPin+0x2c>
 212:	2b b3       	in	r18, 0x1b	; 27
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_SetPin+0x22>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_SetPin+0x1e>
 222:	82 2b       	or	r24, r18
 224:	8b bb       	out	0x1b, r24	; 27
 226:	08 95       	ret
 228:	41 11       	cpse	r20, r1
 22a:	5c c0       	rjmp	.+184    	; 0x2e4 <DIO_SetPin+0xe8>
 22c:	2b b3       	in	r18, 0x1b	; 27
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_SetPin+0x3c>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_SetPin+0x38>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	8b bb       	out	0x1b, r24	; 27
 242:	08 95       	ret
 244:	41 30       	cpi	r20, 0x01	; 1
 246:	59 f4       	brne	.+22     	; 0x25e <DIO_SetPin+0x62>
 248:	28 b3       	in	r18, 0x18	; 24
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_SetPin+0x58>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_SetPin+0x54>
 258:	82 2b       	or	r24, r18
 25a:	88 bb       	out	0x18, r24	; 24
 25c:	08 95       	ret
 25e:	41 11       	cpse	r20, r1
 260:	41 c0       	rjmp	.+130    	; 0x2e4 <DIO_SetPin+0xe8>
 262:	28 b3       	in	r18, 0x18	; 24
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_SetPin+0x72>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_SetPin+0x6e>
 272:	80 95       	com	r24
 274:	82 23       	and	r24, r18
 276:	88 bb       	out	0x18, r24	; 24
 278:	08 95       	ret
 27a:	41 30       	cpi	r20, 0x01	; 1
 27c:	59 f4       	brne	.+22     	; 0x294 <DIO_SetPin+0x98>
 27e:	25 b3       	in	r18, 0x15	; 21
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 c0       	rjmp	.+4      	; 0x28a <DIO_SetPin+0x8e>
 286:	88 0f       	add	r24, r24
 288:	99 1f       	adc	r25, r25
 28a:	6a 95       	dec	r22
 28c:	e2 f7       	brpl	.-8      	; 0x286 <DIO_SetPin+0x8a>
 28e:	82 2b       	or	r24, r18
 290:	85 bb       	out	0x15, r24	; 21
 292:	08 95       	ret
 294:	41 11       	cpse	r20, r1
 296:	26 c0       	rjmp	.+76     	; 0x2e4 <DIO_SetPin+0xe8>
 298:	25 b3       	in	r18, 0x15	; 21
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_SetPin+0xa8>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_SetPin+0xa4>
 2a8:	80 95       	com	r24
 2aa:	82 23       	and	r24, r18
 2ac:	85 bb       	out	0x15, r24	; 21
 2ae:	08 95       	ret
 2b0:	41 30       	cpi	r20, 0x01	; 1
 2b2:	59 f4       	brne	.+22     	; 0x2ca <DIO_SetPin+0xce>
 2b4:	22 b3       	in	r18, 0x12	; 18
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_SetPin+0xc4>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_SetPin+0xc0>
 2c4:	82 2b       	or	r24, r18
 2c6:	82 bb       	out	0x12, r24	; 18
 2c8:	08 95       	ret
 2ca:	41 11       	cpse	r20, r1
 2cc:	0b c0       	rjmp	.+22     	; 0x2e4 <DIO_SetPin+0xe8>
 2ce:	22 b3       	in	r18, 0x12	; 18
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_SetPin+0xde>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_SetPin+0xda>
 2de:	80 95       	com	r24
 2e0:	82 23       	and	r24, r18
 2e2:	82 bb       	out	0x12, r24	; 18
 2e4:	08 95       	ret

000002e6 <DIO_SetPORT>:
		break;
	}
}
void DIO_SetPORT(u8 PortId,u8 PortValue)
{
	switch(PortId)
 2e6:	81 30       	cpi	r24, 0x01	; 1
 2e8:	41 f0       	breq	.+16     	; 0x2fa <DIO_SetPORT+0x14>
 2ea:	28 f0       	brcs	.+10     	; 0x2f6 <DIO_SetPORT+0x10>
 2ec:	82 30       	cpi	r24, 0x02	; 2
 2ee:	39 f0       	breq	.+14     	; 0x2fe <DIO_SetPORT+0x18>
 2f0:	83 30       	cpi	r24, 0x03	; 3
 2f2:	39 f0       	breq	.+14     	; 0x302 <DIO_SetPORT+0x1c>
 2f4:	08 95       	ret
	{
		case 0: //portA
		PORTA=PortValue;
 2f6:	6b bb       	out	0x1b, r22	; 27
		break;
 2f8:	08 95       	ret
		
		case 1: //portB
		PORTB=PortValue;
 2fa:	68 bb       	out	0x18, r22	; 24
		break;
 2fc:	08 95       	ret
		
		case 2: //portC
		PORTC=PortValue;
 2fe:	65 bb       	out	0x15, r22	; 21
		break;
 300:	08 95       	ret
		
		case 3: //portD
		PORTD=PortValue;
 302:	62 bb       	out	0x12, r22	; 18
 304:	08 95       	ret

00000306 <KPD_SCAN>:
#include "KPD_Interface.h"
#include "KPD_Config.h"

/*APIS*/
KPD_SCAN(u8* pinvalue)
{
 306:	7f 92       	push	r7
 308:	8f 92       	push	r8
 30a:	9f 92       	push	r9
 30c:	af 92       	push	r10
 30e:	bf 92       	push	r11
 310:	cf 92       	push	r12
 312:	df 92       	push	r13
 314:	ef 92       	push	r14
 316:	ff 92       	push	r15
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
 324:	69 97       	sbiw	r28, 0x19	; 25
 326:	0f b6       	in	r0, 0x3f	; 63
 328:	f8 94       	cli
 32a:	de bf       	out	0x3e, r29	; 62
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	cd bf       	out	0x3d, r28	; 61
 330:	5c 01       	movw	r10, r24
	*pinvalue= KPD_NOT_PREESD;
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	f5 01       	movw	r30, r10
 336:	80 83       	st	Z, r24
	u8 colonsarr[4]={KPD_COL0,KPD_COL1,KPD_COL2,KPD_COL3};
 338:	24 e0       	ldi	r18, 0x04	; 4
 33a:	29 83       	std	Y+1, r18	; 0x01
 33c:	95 e0       	ldi	r25, 0x05	; 5
 33e:	9a 83       	std	Y+2, r25	; 0x02
 340:	86 e0       	ldi	r24, 0x06	; 6
 342:	8b 83       	std	Y+3, r24	; 0x03
 344:	37 e0       	ldi	r19, 0x07	; 7
 346:	3c 83       	std	Y+4, r19	; 0x04
	u8 rowssarr[4] ={KPD_ROW0,KPD_ROW1,KPD_ROW2,KPD_ROW3};
 348:	33 e0       	ldi	r19, 0x03	; 3
 34a:	3d 83       	std	Y+5, r19	; 0x05
 34c:	2e 83       	std	Y+6, r18	; 0x06
 34e:	9f 83       	std	Y+7, r25	; 0x07
 350:	88 87       	std	Y+8, r24	; 0x08
	u8 key[KPD_KES_ROWS][KPD_KES_COLNS]= KPD_KES_ARC;
 352:	80 e1       	ldi	r24, 0x10	; 16
 354:	e0 e6       	ldi	r30, 0x60	; 96
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	de 01       	movw	r26, r28
 35a:	19 96       	adiw	r26, 0x09	; 9
 35c:	01 90       	ld	r0, Z+
 35e:	0d 92       	st	X+, r0
 360:	8a 95       	dec	r24
 362:	e1 f7       	brne	.-8      	; 0x35c <KPD_SCAN+0x56>
	u8 value;
	u8 colonscounter;
	u8 rowscounter;
	u8 indecator=0;
 364:	71 2c       	mov	r7, r1
	for(colonscounter=0;colonscounter<4;++colonscounter)
 366:	91 2c       	mov	r9, r1
 368:	4d c0       	rjmp	.+154    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	{
		DIO_SetPin(KPD_COLNSPORT,colonsarr[colonscounter],DIO_PIN_LOW);
 36a:	c9 2c       	mov	r12, r9
 36c:	d1 2c       	mov	r13, r1
 36e:	e1 e0       	ldi	r30, 0x01	; 1
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	ec 0f       	add	r30, r28
 374:	fd 1f       	adc	r31, r29
 376:	ec 0d       	add	r30, r12
 378:	fd 1d       	adc	r31, r13
 37a:	80 80       	ld	r8, Z
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	68 2d       	mov	r22, r8
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
		for(rowscounter=0;rowscounter<4;++rowscounter)
 386:	10 e0       	ldi	r17, 0x00	; 0
 388:	32 c0       	rjmp	.+100    	; 0x3ee <KPD_SCAN+0xe8>
		{
			DIO_GetPin(KPD_ROWSSPORT,rowssarr[rowscounter],&value);
 38a:	e1 2e       	mov	r14, r17
 38c:	f1 2c       	mov	r15, r1
 38e:	e5 e0       	ldi	r30, 0x05	; 5
 390:	f0 e0       	ldi	r31, 0x00	; 0
 392:	ec 0f       	add	r30, r28
 394:	fd 1f       	adc	r31, r29
 396:	ee 0d       	add	r30, r14
 398:	ff 1d       	adc	r31, r15
 39a:	00 81       	ld	r16, Z
 39c:	ae 01       	movw	r20, r28
 39e:	47 5e       	subi	r20, 0xE7	; 231
 3a0:	5f 4f       	sbci	r21, 0xFF	; 255
 3a2:	60 2f       	mov	r22, r16
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_GetPin>
			if(0 == value)
 3aa:	89 8d       	ldd	r24, Y+25	; 0x19
 3ac:	81 11       	cpse	r24, r1
 3ae:	1e c0       	rjmp	.+60     	; 0x3ec <KPD_SCAN+0xe6>
			{
				* pinvalue=key[rowscounter][colonscounter];
 3b0:	ee 0c       	add	r14, r14
 3b2:	ff 1c       	adc	r15, r15
 3b4:	ee 0c       	add	r14, r14
 3b6:	ff 1c       	adc	r15, r15
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	8c 0f       	add	r24, r28
 3be:	9d 1f       	adc	r25, r29
 3c0:	e8 0e       	add	r14, r24
 3c2:	f9 1e       	adc	r15, r25
 3c4:	f7 01       	movw	r30, r14
 3c6:	ec 0d       	add	r30, r12
 3c8:	fd 1d       	adc	r31, r13
 3ca:	80 85       	ldd	r24, Z+8	; 0x08
 3cc:	f5 01       	movw	r30, r10
 3ce:	80 83       	st	Z, r24
				while(0==value)
 3d0:	07 c0       	rjmp	.+14     	; 0x3e0 <KPD_SCAN+0xda>
				{
					DIO_GetPin(KPD_ROWSSPORT,rowssarr[rowscounter],&value);
 3d2:	ae 01       	movw	r20, r28
 3d4:	47 5e       	subi	r20, 0xE7	; 231
 3d6:	5f 4f       	sbci	r21, 0xFF	; 255
 3d8:	60 2f       	mov	r22, r16
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_GetPin>
		{
			DIO_GetPin(KPD_ROWSSPORT,rowssarr[rowscounter],&value);
			if(0 == value)
			{
				* pinvalue=key[rowscounter][colonscounter];
				while(0==value)
 3e0:	89 8d       	ldd	r24, Y+25	; 0x19
 3e2:	88 23       	and	r24, r24
 3e4:	b1 f3       	breq	.-20     	; 0x3d2 <KPD_SCAN+0xcc>
				{
					DIO_GetPin(KPD_ROWSSPORT,rowssarr[rowscounter],&value);
				}
				indecator=1;
 3e6:	77 24       	eor	r7, r7
 3e8:	73 94       	inc	r7
 3ea:	03 c0       	rjmp	.+6      	; 0x3f2 <KPD_SCAN+0xec>
	u8 rowscounter;
	u8 indecator=0;
	for(colonscounter=0;colonscounter<4;++colonscounter)
	{
		DIO_SetPin(KPD_COLNSPORT,colonsarr[colonscounter],DIO_PIN_LOW);
		for(rowscounter=0;rowscounter<4;++rowscounter)
 3ec:	1f 5f       	subi	r17, 0xFF	; 255
 3ee:	14 30       	cpi	r17, 0x04	; 4
 3f0:	60 f2       	brcs	.-104    	; 0x38a <KPD_SCAN+0x84>
				indecator=1;
				break;
			}
		}
		
		DIO_SetPin(KPD_COLNSPORT,colonsarr[colonscounter],DIO_PIN_HIGH);
 3f2:	41 e0       	ldi	r20, 0x01	; 1
 3f4:	68 2d       	mov	r22, r8
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
		if(1==indecator)
 3fc:	f1 e0       	ldi	r31, 0x01	; 1
 3fe:	7f 16       	cp	r7, r31
 400:	29 f0       	breq	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
	u8 key[KPD_KES_ROWS][KPD_KES_COLNS]= KPD_KES_ARC;
	u8 value;
	u8 colonscounter;
	u8 rowscounter;
	u8 indecator=0;
	for(colonscounter=0;colonscounter<4;++colonscounter)
 402:	93 94       	inc	r9
 404:	83 e0       	ldi	r24, 0x03	; 3
 406:	89 15       	cp	r24, r9
 408:	08 f0       	brcs	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40a:	af cf       	rjmp	.-162    	; 0x36a <KPD_SCAN+0x64>
		if(1==indecator)
		{
			break;
		}
	}
 40c:	69 96       	adiw	r28, 0x19	; 25
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	de bf       	out	0x3e, r29	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	cd bf       	out	0x3d, r28	; 61
 418:	df 91       	pop	r29
 41a:	cf 91       	pop	r28
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
 424:	df 90       	pop	r13
 426:	cf 90       	pop	r12
 428:	bf 90       	pop	r11
 42a:	af 90       	pop	r10
 42c:	9f 90       	pop	r9
 42e:	8f 90       	pop	r8
 430:	7f 90       	pop	r7
 432:	08 95       	ret

00000434 <LCD_writeHalfport>:

	
}

void LCD_writeHalfport(u8 value)
{
 434:	cf 93       	push	r28
 436:	c8 2f       	mov	r28, r24
	if(1==READ_BIT(value,0))
 438:	80 ff       	sbrs	r24, 0
 43a:	06 c0       	rjmp	.+12     	; 0x448 <LCD_writeHalfport+0x14>
	{
		DIO_SetPin(DIO_PORTB,DIO_PIN4,DIO_PIN_HIGH);
 43c:	41 e0       	ldi	r20, 0x01	; 1
 43e:	64 e0       	ldi	r22, 0x04	; 4
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
 446:	05 c0       	rjmp	.+10     	; 0x452 <LCD_writeHalfport+0x1e>
	}
	else
	{
		DIO_SetPin(DIO_PORTB,DIO_PIN4,DIO_PIN_LOW);
 448:	40 e0       	ldi	r20, 0x00	; 0
 44a:	64 e0       	ldi	r22, 0x04	; 4
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
	}
	
	if(1==READ_BIT(value,1))
 452:	c1 ff       	sbrs	r28, 1
 454:	06 c0       	rjmp	.+12     	; 0x462 <LCD_writeHalfport+0x2e>
	{
		DIO_SetPin(DIO_PORTB,DIO_PIN5,DIO_PIN_HIGH);
 456:	41 e0       	ldi	r20, 0x01	; 1
 458:	65 e0       	ldi	r22, 0x05	; 5
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
 460:	05 c0       	rjmp	.+10     	; 0x46c <LCD_writeHalfport+0x38>
	}
	else
	{
		DIO_SetPin(DIO_PORTB,DIO_PIN5,DIO_PIN_LOW);
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	65 e0       	ldi	r22, 0x05	; 5
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
	}
	
	if(1==READ_BIT(value,2))
 46c:	c2 ff       	sbrs	r28, 2
 46e:	06 c0       	rjmp	.+12     	; 0x47c <LCD_writeHalfport+0x48>
	{
		DIO_SetPin(DIO_PORTB,DIO_PIN6,DIO_PIN_HIGH);
 470:	41 e0       	ldi	r20, 0x01	; 1
 472:	66 e0       	ldi	r22, 0x06	; 6
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
 47a:	05 c0       	rjmp	.+10     	; 0x486 <LCD_writeHalfport+0x52>
	}
	else
	{
		DIO_SetPin(DIO_PORTB,DIO_PIN6,DIO_PIN_LOW);
 47c:	40 e0       	ldi	r20, 0x00	; 0
 47e:	66 e0       	ldi	r22, 0x06	; 6
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
	}
	
	if(1==READ_BIT(value,3))
 486:	c3 ff       	sbrs	r28, 3
 488:	06 c0       	rjmp	.+12     	; 0x496 <LCD_writeHalfport+0x62>
	{
		DIO_SetPin(DIO_PORTB,DIO_PIN7,DIO_PIN_HIGH);
 48a:	41 e0       	ldi	r20, 0x01	; 1
 48c:	67 e0       	ldi	r22, 0x07	; 7
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
 494:	05 c0       	rjmp	.+10     	; 0x4a0 <LCD_writeHalfport+0x6c>
	}
	else
	{
		DIO_SetPin(DIO_PORTB,DIO_PIN7,DIO_PIN_LOW);
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	67 e0       	ldi	r22, 0x07	; 7
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
	}
}
 4a0:	cf 91       	pop	r28
 4a2:	08 95       	ret

000004a4 <LCD_sendcmnd>:
#define  F_CPU 16000000
#include <util/delay.h>


void LCD_sendcmnd(u8 cmnd)
{
 4a4:	cf 93       	push	r28
 4a6:	c8 2f       	mov	r28, r24
	//set the RS to 0 for command lines 
	DIO_SetPin(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);
 4a8:	40 e0       	ldi	r20, 0x00	; 0
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
	
	//SET THE R/W REG TO 0 FOR WRITEING
	DIO_SetPin(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
 4b2:	40 e0       	ldi	r20, 0x00	; 0
 4b4:	62 e0       	ldi	r22, 0x02	; 2
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
	//THE MOST FIRST
	LCD_writeHalfport(cmnd>>4);
 4bc:	8c 2f       	mov	r24, r28
 4be:	82 95       	swap	r24
 4c0:	8f 70       	andi	r24, 0x0F	; 15
 4c2:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_writeHalfport>
	
	//DELAY
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	63 e0       	ldi	r22, 0x03	; 3
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d0:	8f e9       	ldi	r24, 0x9F	; 159
 4d2:	9f e0       	ldi	r25, 0x0F	; 15
 4d4:	01 97       	sbiw	r24, 0x01	; 1
 4d6:	f1 f7       	brne	.-4      	; 0x4d4 <LCD_sendcmnd+0x30>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <LCD_sendcmnd+0x36>
 4da:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 4dc:	40 e0       	ldi	r20, 0x00	; 0
 4de:	63 e0       	ldi	r22, 0x03	; 3
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
	
	//THE LEAST
	LCD_writeHalfport(cmnd);
 4e6:	8c 2f       	mov	r24, r28
 4e8:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_writeHalfport>
	
	//DELAY
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 4ec:	41 e0       	ldi	r20, 0x01	; 1
 4ee:	63 e0       	ldi	r22, 0x03	; 3
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
 4f6:	8f e9       	ldi	r24, 0x9F	; 159
 4f8:	9f e0       	ldi	r25, 0x0F	; 15
 4fa:	01 97       	sbiw	r24, 0x01	; 1
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <LCD_sendcmnd+0x56>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <LCD_sendcmnd+0x5c>
 500:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	63 e0       	ldi	r22, 0x03	; 3
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
	
	
}
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <LCD_sendchar>:

void LCD_sendchar(u8 data)
{
 510:	cf 93       	push	r28
 512:	c8 2f       	mov	r28, r24
	//set the RS to 1 for Data lines
	DIO_SetPin(DIO_PORTB,DIO_PIN1,DIO_PIN_HIGH);
 514:	41 e0       	ldi	r20, 0x01	; 1
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
	
	//SET THE R/W REG TO 0 FOR WRITEING
	DIO_SetPin(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
 51e:	40 e0       	ldi	r20, 0x00	; 0
 520:	62 e0       	ldi	r22, 0x02	; 2
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
	//THE MOST FIRST
	LCD_writeHalfport(data>>4);
 528:	8c 2f       	mov	r24, r28
 52a:	82 95       	swap	r24
 52c:	8f 70       	andi	r24, 0x0F	; 15
 52e:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_writeHalfport>
	
	//DELAY
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 532:	41 e0       	ldi	r20, 0x01	; 1
 534:	63 e0       	ldi	r22, 0x03	; 3
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
 53c:	8f e9       	ldi	r24, 0x9F	; 159
 53e:	9f e0       	ldi	r25, 0x0F	; 15
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <LCD_sendchar+0x30>
 544:	00 c0       	rjmp	.+0      	; 0x546 <LCD_sendchar+0x36>
 546:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 548:	40 e0       	ldi	r20, 0x00	; 0
 54a:	63 e0       	ldi	r22, 0x03	; 3
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
	
	//THE LEAST
	LCD_writeHalfport(data);
 552:	8c 2f       	mov	r24, r28
 554:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_writeHalfport>
	
	//DELAY
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 558:	41 e0       	ldi	r20, 0x01	; 1
 55a:	63 e0       	ldi	r22, 0x03	; 3
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
 562:	8f e9       	ldi	r24, 0x9F	; 159
 564:	9f e0       	ldi	r25, 0x0F	; 15
 566:	01 97       	sbiw	r24, 0x01	; 1
 568:	f1 f7       	brne	.-4      	; 0x566 <LCD_sendchar+0x56>
 56a:	00 c0       	rjmp	.+0      	; 0x56c <LCD_sendchar+0x5c>
 56c:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 56e:	40 e0       	ldi	r20, 0x00	; 0
 570:	63 e0       	ldi	r22, 0x03	; 3
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
}
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <LCD_init>:
 57c:	2f ef       	ldi	r18, 0xFF	; 255
 57e:	83 ef       	ldi	r24, 0xF3	; 243
 580:	91 e0       	ldi	r25, 0x01	; 1
 582:	21 50       	subi	r18, 0x01	; 1
 584:	80 40       	sbci	r24, 0x00	; 0
 586:	90 40       	sbci	r25, 0x00	; 0
 588:	e1 f7       	brne	.-8      	; 0x582 <LCD_init+0x6>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <LCD_init+0x10>
 58c:	00 00       	nop

void LCD_init(void)
{
	_delay_ms(40);
	//set the RS to 0 for Command lines
	DIO_SetPin(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);
 58e:	40 e0       	ldi	r20, 0x00	; 0
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
	
	//SET THE R/W REG TO 0 FOR WRITEING
	DIO_SetPin(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
 598:	40 e0       	ldi	r20, 0x00	; 0
 59a:	62 e0       	ldi	r22, 0x02	; 2
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
	
	LCD_writeHalfport(0b0010);
 5a2:	82 e0       	ldi	r24, 0x02	; 2
 5a4:	0e 94 1a 02 	call	0x434	; 0x434 <LCD_writeHalfport>
	
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 5a8:	41 e0       	ldi	r20, 0x01	; 1
 5aa:	63 e0       	ldi	r22, 0x03	; 3
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
 5b2:	8f e9       	ldi	r24, 0x9F	; 159
 5b4:	9f e0       	ldi	r25, 0x0F	; 15
 5b6:	01 97       	sbiw	r24, 0x01	; 1
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <LCD_init+0x3a>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <LCD_init+0x40>
 5bc:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 5be:	40 e0       	ldi	r20, 0x00	; 0
 5c0:	63 e0       	ldi	r22, 0x03	; 3
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <DIO_SetPin>
	
	LCD_sendcmnd(0b00101000);
 5c8:	88 e2       	ldi	r24, 0x28	; 40
 5ca:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_sendcmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ce:	90 ef       	ldi	r25, 0xF0	; 240
 5d0:	9a 95       	dec	r25
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <LCD_init+0x54>
	
	_delay_us(45);
	
	//00001display,courser,blink
	LCD_sendcmnd(0b00001111);
 5d4:	8f e0       	ldi	r24, 0x0F	; 15
 5d6:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_sendcmnd>
 5da:	20 ef       	ldi	r18, 0xF0	; 240
 5dc:	2a 95       	dec	r18
 5de:	f1 f7       	brne	.-4      	; 0x5dc <LCD_init+0x60>
	
	_delay_us(45);
	
	LCD_sendcmnd(0b00000001);
 5e0:	81 e0       	ldi	r24, 0x01	; 1
 5e2:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_sendcmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e6:	8f e3       	ldi	r24, 0x3F	; 63
 5e8:	9f e1       	ldi	r25, 0x1F	; 31
 5ea:	01 97       	sbiw	r24, 0x01	; 1
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <LCD_init+0x6e>
 5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <LCD_init+0x74>
 5f0:	00 00       	nop
	
	_delay_ms(2);
	
	LCD_sendcmnd(0b00000110);
 5f2:	86 e0       	ldi	r24, 0x06	; 6
 5f4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <LCD_sendcmnd>
 5f8:	9f ef       	ldi	r25, 0xFF	; 255
 5fa:	20 e7       	ldi	r18, 0x70	; 112
 5fc:	82 e0       	ldi	r24, 0x02	; 2
 5fe:	91 50       	subi	r25, 0x01	; 1
 600:	20 40       	sbci	r18, 0x00	; 0
 602:	80 40       	sbci	r24, 0x00	; 0
 604:	e1 f7       	brne	.-8      	; 0x5fe <LCD_init+0x82>
 606:	00 c0       	rjmp	.+0      	; 0x608 <LCD_init+0x8c>
 608:	00 00       	nop
 60a:	08 95       	ret

0000060c <main>:
#include "KPD_Config.h"
#include "LCD_Interface.h"
#include "LCD_Config.h"

int main(void)
{
 60c:	cf 93       	push	r28
 60e:	df 93       	push	r29
 610:	1f 92       	push	r1
 612:	cd b7       	in	r28, 0x3d	; 61
 614:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 616:	41 e0       	ldi	r20, 0x01	; 1
 618:	64 e0       	ldi	r22, 0x04	; 4
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 620:	41 e0       	ldi	r20, 0x01	; 1
 622:	65 e0       	ldi	r22, 0x05	; 5
 624:	80 e0       	ldi	r24, 0x00	; 0
 626:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 62a:	41 e0       	ldi	r20, 0x01	; 1
 62c:	66 e0       	ldi	r22, 0x06	; 6
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 634:	41 e0       	ldi	r20, 0x01	; 1
 636:	67 e0       	ldi	r22, 0x07	; 7
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(DIO_PORTC,DIO_PIN3,DIO_PIN_INPUT);
 63e:	40 e0       	ldi	r20, 0x00	; 0
 640:	63 e0       	ldi	r22, 0x03	; 3
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC,DIO_PIN4,DIO_PIN_INPUT);
 648:	40 e0       	ldi	r20, 0x00	; 0
 64a:	64 e0       	ldi	r22, 0x04	; 4
 64c:	82 e0       	ldi	r24, 0x02	; 2
 64e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC,DIO_PIN5,DIO_PIN_INPUT);
 652:	40 e0       	ldi	r20, 0x00	; 0
 654:	65 e0       	ldi	r22, 0x05	; 5
 656:	82 e0       	ldi	r24, 0x02	; 2
 658:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC,DIO_PIN6,DIO_PIN_INPUT);
 65c:	40 e0       	ldi	r20, 0x00	; 0
 65e:	66 e0       	ldi	r22, 0x06	; 6
 660:	82 e0       	ldi	r24, 0x02	; 2
 662:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	
	
	DIO_SetPORT(DIO_PORTB,DIO_PIN_OUTPUT);
 666:	61 e0       	ldi	r22, 0x01	; 1
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <DIO_SetPORT>
	
	LCD_init();
 66e:	0e 94 be 02 	call	0x57c	; 0x57c <LCD_init>
	u8 key_state;
    /* Replace with your application code */
    while (1) 
    {
		KPD_SCAN(&key_state);
 672:	ce 01       	movw	r24, r28
 674:	01 96       	adiw	r24, 0x01	; 1
 676:	0e 94 83 01 	call	0x306	; 0x306 <KPD_SCAN>
		if ('7'==key_state)
 67a:	89 81       	ldd	r24, Y+1	; 0x01
 67c:	87 33       	cpi	r24, 0x37	; 55
 67e:	c9 f7       	brne	.-14     	; 0x672 <main+0x66>
		{
			LCD_sendchar('key_state');
 680:	85 e6       	ldi	r24, 0x65	; 101
 682:	0e 94 88 02 	call	0x510	; 0x510 <LCD_sendchar>
 686:	f5 cf       	rjmp	.-22     	; 0x672 <main+0x66>

00000688 <_exit>:
 688:	f8 94       	cli

0000068a <__stop_program>:
 68a:	ff cf       	rjmp	.-2      	; 0x68a <__stop_program>


LED_MODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000330  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ae5  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067f  00000000  00000000  00000f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005da  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  00001bf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040f  00000000  00000000  00001d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ef  00000000  00000000  0000213b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  0000272a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 74 01 	call	0x2e8	; 0x2e8 <main>
  64:	0c 94 96 01 	jmp	0x32c	; 0x32c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDirection>:
/* MCAL*/
#include "DIO_Interface.h"

void DIO_SetPinDirection(u8 PortId,u8 PinId,u8 PinDirection)
{
	switch(PortId)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	11 f1       	breq	.+68     	; 0xb4 <DIO_SetPinDirection+0x48>
  70:	30 f0       	brcs	.+12     	; 0x7e <DIO_SetPinDirection+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	d1 f1       	breq	.+116    	; 0xea <DIO_SetPinDirection+0x7e>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <DIO_SetPinDirection+0x10>
  7a:	52 c0       	rjmp	.+164    	; 0x120 <DIO_SetPinDirection+0xb4>
  7c:	08 95       	ret
	{
		/* CASE A */
		case DIO_PORTA:
		if(DIO_PIN_OUTPUT==PinDirection)
  7e:	41 30       	cpi	r20, 0x01	; 1
  80:	59 f4       	brne	.+22     	; 0x98 <DIO_SetPinDirection+0x2c>
		{
			SET_BIT(DDRA,PinId);
  82:	2a b3       	in	r18, 0x1a	; 26
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <DIO_SetPinDirection+0x22>
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <DIO_SetPinDirection+0x1e>
  92:	82 2b       	or	r24, r18
  94:	8a bb       	out	0x1a, r24	; 26
  96:	08 95       	ret
		}
		else if(DIO_PIN_INPUT==PinDirection)
  98:	41 11       	cpse	r20, r1
  9a:	5c c0       	rjmp	.+184    	; 0x154 <DIO_SetPinDirection+0xe8>
		{
			CLR_BIT(DDRA,PinId);
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDirection+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDirection+0x38>
  ac:	80 95       	com	r24
  ae:	82 23       	and	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	08 95       	ret
		break;
		
		/* CASE B */
		
		case DIO_PORTB:
		if(DIO_PIN_OUTPUT==PinDirection)
  b4:	41 30       	cpi	r20, 0x01	; 1
  b6:	59 f4       	brne	.+22     	; 0xce <DIO_SetPinDirection+0x62>
		{
			SET_BIT(DDRB,PinId);
  b8:	27 b3       	in	r18, 0x17	; 23
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_SetPinDirection+0x58>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_SetPinDirection+0x54>
  c8:	82 2b       	or	r24, r18
  ca:	87 bb       	out	0x17, r24	; 23
  cc:	08 95       	ret
		}
		else if(DIO_PIN_INPUT==PinDirection)
  ce:	41 11       	cpse	r20, r1
  d0:	41 c0       	rjmp	.+130    	; 0x154 <DIO_SetPinDirection+0xe8>
		{
			CLR_BIT(DDRB,PinId);
  d2:	27 b3       	in	r18, 0x17	; 23
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_SetPinDirection+0x72>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_SetPinDirection+0x6e>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	87 bb       	out	0x17, r24	; 23
  e8:	08 95       	ret
		break;
		
		/* CASE C */
		
		case DIO_PORTC:
		if(DIO_PIN_OUTPUT==PinDirection)
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	59 f4       	brne	.+22     	; 0x104 <DIO_SetPinDirection+0x98>
		{
			SET_BIT(DDRC,PinId);
  ee:	24 b3       	in	r18, 0x14	; 20
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDirection+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDirection+0x8a>
  fe:	82 2b       	or	r24, r18
 100:	84 bb       	out	0x14, r24	; 20
 102:	08 95       	ret
		}
		else if(DIO_PIN_INPUT==PinDirection)
 104:	41 11       	cpse	r20, r1
 106:	26 c0       	rjmp	.+76     	; 0x154 <DIO_SetPinDirection+0xe8>
		{
			CLR_BIT(DDRC,PinId);
 108:	24 b3       	in	r18, 0x14	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_SetPinDirection+0xa8>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_SetPinDirection+0xa4>
 118:	80 95       	com	r24
 11a:	82 23       	and	r24, r18
 11c:	84 bb       	out	0x14, r24	; 20
 11e:	08 95       	ret
		break;
		
		/* CASE D */
		
		case DIO_PORTD:
		if(DIO_PIN_OUTPUT==PinDirection)
 120:	41 30       	cpi	r20, 0x01	; 1
 122:	59 f4       	brne	.+22     	; 0x13a <DIO_SetPinDirection+0xce>
		{
			SET_BIT(DDRD,PinId);
 124:	21 b3       	in	r18, 0x11	; 17
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_SetPinDirection+0xc4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_SetPinDirection+0xc0>
 134:	82 2b       	or	r24, r18
 136:	81 bb       	out	0x11, r24	; 17
 138:	08 95       	ret
		}
		else if(DIO_PIN_INPUT==PinDirection)
 13a:	41 11       	cpse	r20, r1
 13c:	0b c0       	rjmp	.+22     	; 0x154 <DIO_SetPinDirection+0xe8>
		{
			CLR_BIT(DDRD,PinId);
 13e:	21 b3       	in	r18, 0x11	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SetPinDirection+0xde>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SetPinDirection+0xda>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret

00000156 <DIO_GetPin>:
	}
}

void DIO_GetPin(u8 PortId,u8 PinId,u8* PinValue)
{
	switch(PortId)
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	b1 f0       	breq	.+44     	; 0x186 <DIO_GetPin+0x30>
 15a:	28 f0       	brcs	.+10     	; 0x166 <DIO_GetPin+0x10>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	19 f1       	breq	.+70     	; 0x1a6 <DIO_GetPin+0x50>
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	89 f1       	breq	.+98     	; 0x1c6 <DIO_GetPin+0x70>
 164:	08 95       	ret
	{
		case DIO_PORTA:
		if(1 == READ_BIT(PINA,PinId))
 166:	89 b3       	in	r24, 0x19	; 25
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_GetPin+0x1a>
 16c:	95 95       	asr	r25
 16e:	87 95       	ror	r24
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_GetPin+0x16>
 174:	80 ff       	sbrs	r24, 0
 176:	04 c0       	rjmp	.+8      	; 0x180 <DIO_GetPin+0x2a>
		{
			*PinValue= DIO_PIN_HIGH;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	fa 01       	movw	r30, r20
 17c:	80 83       	st	Z, r24
 17e:	08 95       	ret
		}
		else
		{
			*PinValue= DIO_PIN_LOW;
 180:	fa 01       	movw	r30, r20
 182:	10 82       	st	Z, r1
 184:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		if(1 == READ_BIT(PINB,PinId))
 186:	86 b3       	in	r24, 0x16	; 22
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_GetPin+0x3a>
 18c:	95 95       	asr	r25
 18e:	87 95       	ror	r24
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_GetPin+0x36>
 194:	80 ff       	sbrs	r24, 0
 196:	04 c0       	rjmp	.+8      	; 0x1a0 <DIO_GetPin+0x4a>
		{
			*PinValue= DIO_PIN_HIGH;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	fa 01       	movw	r30, r20
 19c:	80 83       	st	Z, r24
 19e:	08 95       	ret
		}
		else
		{
			*PinValue= DIO_PIN_LOW;
 1a0:	fa 01       	movw	r30, r20
 1a2:	10 82       	st	Z, r1
 1a4:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		if(1 == READ_BIT(PINC,PinId))
 1a6:	83 b3       	in	r24, 0x13	; 19
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_GetPin+0x5a>
 1ac:	95 95       	asr	r25
 1ae:	87 95       	ror	r24
 1b0:	6a 95       	dec	r22
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_GetPin+0x56>
 1b4:	80 ff       	sbrs	r24, 0
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <DIO_GetPin+0x6a>
		{
			*PinValue= DIO_PIN_HIGH;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	fa 01       	movw	r30, r20
 1bc:	80 83       	st	Z, r24
 1be:	08 95       	ret
		}
		else
		{
			*PinValue= DIO_PIN_LOW;
 1c0:	fa 01       	movw	r30, r20
 1c2:	10 82       	st	Z, r1
 1c4:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		if(1 == READ_BIT(PIND,PinId))
 1c6:	80 b3       	in	r24, 0x10	; 16
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <DIO_GetPin+0x7a>
 1cc:	95 95       	asr	r25
 1ce:	87 95       	ror	r24
 1d0:	6a 95       	dec	r22
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <DIO_GetPin+0x76>
 1d4:	80 ff       	sbrs	r24, 0
 1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <DIO_GetPin+0x8a>
		{
			*PinValue= DIO_PIN_HIGH;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	fa 01       	movw	r30, r20
 1dc:	80 83       	st	Z, r24
 1de:	08 95       	ret
		}
		else
		{
			*PinValue= DIO_PIN_LOW;
 1e0:	fa 01       	movw	r30, r20
 1e2:	10 82       	st	Z, r1
 1e4:	08 95       	ret

000001e6 <DIO_SetPin>:
	}
}

void DIO_SetPin(u8 PortId,u8 PinId,u8 PinValue)
{
	switch(PortId)
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	11 f1       	breq	.+68     	; 0x22e <DIO_SetPin+0x48>
 1ea:	30 f0       	brcs	.+12     	; 0x1f8 <DIO_SetPin+0x12>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	d1 f1       	breq	.+116    	; 0x264 <DIO_SetPin+0x7e>
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <DIO_SetPin+0x10>
 1f4:	52 c0       	rjmp	.+164    	; 0x29a <DIO_SetPin+0xb4>
 1f6:	08 95       	ret
	{
		case DIO_PORTA:
		if(DIO_PIN_HIGH == PinValue)
 1f8:	41 30       	cpi	r20, 0x01	; 1
 1fa:	59 f4       	brne	.+22     	; 0x212 <DIO_SetPin+0x2c>
		{
			SET_BIT(PORTA,PinId);
 1fc:	2b b3       	in	r18, 0x1b	; 27
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_SetPin+0x22>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_SetPin+0x1e>
 20c:	82 2b       	or	r24, r18
 20e:	8b bb       	out	0x1b, r24	; 27
 210:	08 95       	ret
		}
		else if(DIO_PIN_LOW == PinValue)
 212:	41 11       	cpse	r20, r1
 214:	5c c0       	rjmp	.+184    	; 0x2ce <DIO_SetPin+0xe8>
		{
			CLR_BIT(PORTA,PinId);
 216:	2b b3       	in	r18, 0x1b	; 27
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_SetPin+0x3c>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_SetPin+0x38>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	8b bb       	out	0x1b, r24	; 27
 22c:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		if(DIO_PIN_HIGH == PinValue)
 22e:	41 30       	cpi	r20, 0x01	; 1
 230:	59 f4       	brne	.+22     	; 0x248 <DIO_SetPin+0x62>
		{
			SET_BIT(PORTB,PinId);
 232:	28 b3       	in	r18, 0x18	; 24
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_SetPin+0x58>
 23a:	88 0f       	add	r24, r24
 23c:	99 1f       	adc	r25, r25
 23e:	6a 95       	dec	r22
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_SetPin+0x54>
 242:	82 2b       	or	r24, r18
 244:	88 bb       	out	0x18, r24	; 24
 246:	08 95       	ret
		}
		else if(DIO_PIN_LOW == PinValue)
 248:	41 11       	cpse	r20, r1
 24a:	41 c0       	rjmp	.+130    	; 0x2ce <DIO_SetPin+0xe8>
		{
			CLR_BIT(PORTB,PinId);
 24c:	28 b3       	in	r18, 0x18	; 24
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_SetPin+0x72>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	6a 95       	dec	r22
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_SetPin+0x6e>
 25c:	80 95       	com	r24
 25e:	82 23       	and	r24, r18
 260:	88 bb       	out	0x18, r24	; 24
 262:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		if(DIO_PIN_HIGH == PinValue)
 264:	41 30       	cpi	r20, 0x01	; 1
 266:	59 f4       	brne	.+22     	; 0x27e <DIO_SetPin+0x98>
		{
			SET_BIT(PORTC,PinId);
 268:	25 b3       	in	r18, 0x15	; 21
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SetPin+0x8e>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SetPin+0x8a>
 278:	82 2b       	or	r24, r18
 27a:	85 bb       	out	0x15, r24	; 21
 27c:	08 95       	ret
		}
		else if(DIO_PIN_LOW == PinValue)
 27e:	41 11       	cpse	r20, r1
 280:	26 c0       	rjmp	.+76     	; 0x2ce <DIO_SetPin+0xe8>
		{
			CLR_BIT(PORTC,PinId);
 282:	25 b3       	in	r18, 0x15	; 21
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_SetPin+0xa8>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_SetPin+0xa4>
 292:	80 95       	com	r24
 294:	82 23       	and	r24, r18
 296:	85 bb       	out	0x15, r24	; 21
 298:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		if(DIO_PIN_HIGH == PinValue)
 29a:	41 30       	cpi	r20, 0x01	; 1
 29c:	59 f4       	brne	.+22     	; 0x2b4 <DIO_SetPin+0xce>
		{
			SET_BIT(PORTD,PinId);
 29e:	22 b3       	in	r18, 0x12	; 18
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_SetPin+0xc4>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	6a 95       	dec	r22
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_SetPin+0xc0>
 2ae:	82 2b       	or	r24, r18
 2b0:	82 bb       	out	0x12, r24	; 18
 2b2:	08 95       	ret
		}
		else if(DIO_PIN_LOW == PinValue)
 2b4:	41 11       	cpse	r20, r1
 2b6:	0b c0       	rjmp	.+22     	; 0x2ce <DIO_SetPin+0xe8>
		{
			CLR_BIT(PORTD,PinId);
 2b8:	22 b3       	in	r18, 0x12	; 18
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_SetPin+0xde>
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	6a 95       	dec	r22
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_SetPin+0xda>
 2c8:	80 95       	com	r24
 2ca:	82 23       	and	r24, r18
 2cc:	82 bb       	out	0x12, r24	; 18
 2ce:	08 95       	ret

000002d0 <LED_SETIT>:
/*HAL*/
#include "LED_interface.h"

void LED_SETIT(u8 PortId,u8 PinId)
{
	DIO_SetPinDirection(PortId,PinId,DIO_PIN_OUTPUT);
 2d0:	41 e0       	ldi	r20, 0x01	; 1
 2d2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
 2d6:	08 95       	ret

000002d8 <LED_ON>:
}
void LED_ON  (u8 PortId,u8 PinId)
{
	 DIO_SetPin( PortId, PinId, DIO_PIN_HIGH);
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPin>
 2de:	08 95       	ret

000002e0 <LED_OF>:
}
void LED_OF   (u8 PortId,u8 PinId)
{
	DIO_SetPin( PortId, PinId, DIO_PIN_LOW);
 2e0:	40 e0       	ldi	r20, 0x00	; 0
 2e2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_SetPin>
 2e6:	08 95       	ret

000002e8 <main>:
/*HAL*/
#include "LED_interface.h"


int main(void)
{
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	1f 92       	push	r1
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
	LED_SETIT(DIO_PORTA,DIO_PIN0);
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LED_SETIT>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_INPUT);
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	62 e0       	ldi	r22, 0x02	; 2
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	u8 button;
    /* Replace with your application code */
    while (1) 
    {
		DIO_GetPin(DIO_PORTB,DIO_PIN2,&button);
 304:	ae 01       	movw	r20, r28
 306:	4f 5f       	subi	r20, 0xFF	; 255
 308:	5f 4f       	sbci	r21, 0xFF	; 255
 30a:	62 e0       	ldi	r22, 0x02	; 2
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_GetPin>
		if (DIO_PIN_HIGH==button)
 312:	89 81       	ldd	r24, Y+1	; 0x01
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	29 f4       	brne	.+10     	; 0x322 <main+0x3a>
		{
			LED_ON(DIO_PORTA,DIO_PIN0);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LED_ON>
 320:	f1 cf       	rjmp	.-30     	; 0x304 <main+0x1c>
		}
		else
		{
			LED_OF(DIO_PORTA,DIO_PIN0);
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 70 01 	call	0x2e0	; 0x2e0 <LED_OF>
 32a:	ec cf       	rjmp	.-40     	; 0x304 <main+0x1c>

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>

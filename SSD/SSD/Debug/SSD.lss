
SSD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000348  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c61  00000000  00000000  000004c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073d  00000000  00000000  00001129  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000738  00000000  00000000  00001866  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  00001fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000476  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005cd  00000000  00000000  0000254a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00002b17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 20 01 	call	0x240	; 0x240 <main>
  64:	0c 94 a2 01 	jmp	0x344	; 0x344 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_SetPinDirection>:
		{
			*PinValue= DIO_PIN_HIGH;
		}
		else
		{
			*PinValue= DIO_PIN_LOW;
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	11 f1       	breq	.+68     	; 0xb4 <DIO_SetPinDirection+0x48>
  70:	30 f0       	brcs	.+12     	; 0x7e <DIO_SetPinDirection+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	d1 f1       	breq	.+116    	; 0xea <DIO_SetPinDirection+0x7e>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <DIO_SetPinDirection+0x10>
  7a:	52 c0       	rjmp	.+164    	; 0x120 <DIO_SetPinDirection+0xb4>
  7c:	08 95       	ret
  7e:	41 30       	cpi	r20, 0x01	; 1
  80:	59 f4       	brne	.+22     	; 0x98 <DIO_SetPinDirection+0x2c>
  82:	2a b3       	in	r18, 0x1a	; 26
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <DIO_SetPinDirection+0x22>
  8a:	88 0f       	add	r24, r24
  8c:	99 1f       	adc	r25, r25
  8e:	6a 95       	dec	r22
  90:	e2 f7       	brpl	.-8      	; 0x8a <DIO_SetPinDirection+0x1e>
  92:	82 2b       	or	r24, r18
  94:	8a bb       	out	0x1a, r24	; 26
  96:	08 95       	ret
  98:	41 11       	cpse	r20, r1
  9a:	5c c0       	rjmp	.+184    	; 0x154 <DIO_SetPinDirection+0xe8>
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPinDirection+0x3c>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPinDirection+0x38>
  ac:	80 95       	com	r24
  ae:	82 23       	and	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	08 95       	ret
  b4:	41 30       	cpi	r20, 0x01	; 1
  b6:	59 f4       	brne	.+22     	; 0xce <DIO_SetPinDirection+0x62>
  b8:	27 b3       	in	r18, 0x17	; 23
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_SetPinDirection+0x58>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_SetPinDirection+0x54>
  c8:	82 2b       	or	r24, r18
  ca:	87 bb       	out	0x17, r24	; 23
  cc:	08 95       	ret
  ce:	41 11       	cpse	r20, r1
  d0:	41 c0       	rjmp	.+130    	; 0x154 <DIO_SetPinDirection+0xe8>
  d2:	27 b3       	in	r18, 0x17	; 23
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_SetPinDirection+0x72>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_SetPinDirection+0x6e>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	87 bb       	out	0x17, r24	; 23
  e8:	08 95       	ret
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	59 f4       	brne	.+22     	; 0x104 <DIO_SetPinDirection+0x98>
  ee:	24 b3       	in	r18, 0x14	; 20
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_SetPinDirection+0x8e>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_SetPinDirection+0x8a>
  fe:	82 2b       	or	r24, r18
 100:	84 bb       	out	0x14, r24	; 20
 102:	08 95       	ret
 104:	41 11       	cpse	r20, r1
 106:	26 c0       	rjmp	.+76     	; 0x154 <DIO_SetPinDirection+0xe8>
 108:	24 b3       	in	r18, 0x14	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_SetPinDirection+0xa8>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_SetPinDirection+0xa4>
 118:	80 95       	com	r24
 11a:	82 23       	and	r24, r18
 11c:	84 bb       	out	0x14, r24	; 20
 11e:	08 95       	ret
 120:	41 30       	cpi	r20, 0x01	; 1
 122:	59 f4       	brne	.+22     	; 0x13a <DIO_SetPinDirection+0xce>
 124:	21 b3       	in	r18, 0x11	; 17
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <DIO_SetPinDirection+0xc4>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	6a 95       	dec	r22
 132:	e2 f7       	brpl	.-8      	; 0x12c <DIO_SetPinDirection+0xc0>
 134:	82 2b       	or	r24, r18
 136:	81 bb       	out	0x11, r24	; 17
 138:	08 95       	ret
 13a:	41 11       	cpse	r20, r1
 13c:	0b c0       	rjmp	.+22     	; 0x154 <DIO_SetPinDirection+0xe8>
 13e:	21 b3       	in	r18, 0x11	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SetPinDirection+0xde>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SetPinDirection+0xda>
 14e:	80 95       	com	r24
 150:	82 23       	and	r24, r18
 152:	81 bb       	out	0x11, r24	; 17
 154:	08 95       	ret

00000156 <DIO_SetPin>:
	}
}

void DIO_SetPin(u8 PortId,u8 PinId,u8 PinValue)
{
	switch(PortId)
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	11 f1       	breq	.+68     	; 0x19e <DIO_SetPin+0x48>
 15a:	30 f0       	brcs	.+12     	; 0x168 <DIO_SetPin+0x12>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	d1 f1       	breq	.+116    	; 0x1d4 <DIO_SetPin+0x7e>
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	09 f4       	brne	.+2      	; 0x166 <DIO_SetPin+0x10>
 164:	52 c0       	rjmp	.+164    	; 0x20a <DIO_SetPin+0xb4>
 166:	08 95       	ret
	{
		case DIO_PORTA:
		if(DIO_PIN_HIGH == PinValue)
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	59 f4       	brne	.+22     	; 0x182 <DIO_SetPin+0x2c>
		{
			SET_BIT(PORTA,PinId);
 16c:	2b b3       	in	r18, 0x1b	; 27
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_SetPin+0x22>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	6a 95       	dec	r22
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_SetPin+0x1e>
 17c:	82 2b       	or	r24, r18
 17e:	8b bb       	out	0x1b, r24	; 27
 180:	08 95       	ret
		}
		else if(DIO_PIN_LOW == PinValue)
 182:	41 11       	cpse	r20, r1
 184:	5c c0       	rjmp	.+184    	; 0x23e <DIO_SetPin+0xe8>
		{
			CLR_BIT(PORTA,PinId);
 186:	2b b3       	in	r18, 0x1b	; 27
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_SetPin+0x3c>
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	6a 95       	dec	r22
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_SetPin+0x38>
 196:	80 95       	com	r24
 198:	82 23       	and	r24, r18
 19a:	8b bb       	out	0x1b, r24	; 27
 19c:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		if(DIO_PIN_HIGH == PinValue)
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	59 f4       	brne	.+22     	; 0x1b8 <DIO_SetPin+0x62>
		{
			SET_BIT(PORTB,PinId);
 1a2:	28 b3       	in	r18, 0x18	; 24
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_SetPin+0x58>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_SetPin+0x54>
 1b2:	82 2b       	or	r24, r18
 1b4:	88 bb       	out	0x18, r24	; 24
 1b6:	08 95       	ret
		}
		else if(DIO_PIN_LOW == PinValue)
 1b8:	41 11       	cpse	r20, r1
 1ba:	41 c0       	rjmp	.+130    	; 0x23e <DIO_SetPin+0xe8>
		{
			CLR_BIT(PORTB,PinId);
 1bc:	28 b3       	in	r18, 0x18	; 24
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_SetPin+0x72>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_SetPin+0x6e>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	88 bb       	out	0x18, r24	; 24
 1d2:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		if(DIO_PIN_HIGH == PinValue)
 1d4:	41 30       	cpi	r20, 0x01	; 1
 1d6:	59 f4       	brne	.+22     	; 0x1ee <DIO_SetPin+0x98>
		{
			SET_BIT(PORTC,PinId);
 1d8:	25 b3       	in	r18, 0x15	; 21
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_SetPin+0x8e>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_SetPin+0x8a>
 1e8:	82 2b       	or	r24, r18
 1ea:	85 bb       	out	0x15, r24	; 21
 1ec:	08 95       	ret
		}
		else if(DIO_PIN_LOW == PinValue)
 1ee:	41 11       	cpse	r20, r1
 1f0:	26 c0       	rjmp	.+76     	; 0x23e <DIO_SetPin+0xe8>
		{
			CLR_BIT(PORTC,PinId);
 1f2:	25 b3       	in	r18, 0x15	; 21
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_SetPin+0xa8>
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	6a 95       	dec	r22
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_SetPin+0xa4>
 202:	80 95       	com	r24
 204:	82 23       	and	r24, r18
 206:	85 bb       	out	0x15, r24	; 21
 208:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		if(DIO_PIN_HIGH == PinValue)
 20a:	41 30       	cpi	r20, 0x01	; 1
 20c:	59 f4       	brne	.+22     	; 0x224 <DIO_SetPin+0xce>
		{
			SET_BIT(PORTD,PinId);
 20e:	22 b3       	in	r18, 0x12	; 18
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_SetPin+0xc4>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_SetPin+0xc0>
 21e:	82 2b       	or	r24, r18
 220:	82 bb       	out	0x12, r24	; 18
 222:	08 95       	ret
		}
		else if(DIO_PIN_LOW == PinValue)
 224:	41 11       	cpse	r20, r1
 226:	0b c0       	rjmp	.+22     	; 0x23e <DIO_SetPin+0xe8>
		{
			CLR_BIT(PORTD,PinId);
 228:	22 b3       	in	r18, 0x12	; 18
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_SetPin+0xde>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_SetPin+0xda>
 238:	80 95       	com	r24
 23a:	82 23       	and	r24, r18
 23c:	82 bb       	out	0x12, r24	; 18
 23e:	08 95       	ret

00000240 <main>:
#include "SSD_interface.h"


int main(void)
{
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 24a:	41 e0       	ldi	r20, 0x01	; 1
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 254:	41 e0       	ldi	r20, 0x01	; 1
 256:	63 e0       	ldi	r22, 0x03	; 3
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	64 e0       	ldi	r22, 0x04	; 4
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 268:	41 e0       	ldi	r20, 0x01	; 1
 26a:	65 e0       	ldi	r22, 0x05	; 5
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	66 e0       	ldi	r22, 0x06	; 6
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	67 e0       	ldi	r22, 0x07	; 7
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_SetPinDirection>
	
	SSD_init();
 286:	0e 94 57 01 	call	0x2ae	; 0x2ae <SSD_init>
	u8 counter;
    while (1) 
    {
		for (counter=0;counter<=10;counter++)
 28a:	c0 e0       	ldi	r28, 0x00	; 0
 28c:	0d c0       	rjmp	.+26     	; 0x2a8 <main+0x68>
		{
			SSD_displaynymber(counter);
 28e:	8c 2f       	mov	r24, r28
 290:	0e 94 9f 01 	call	0x33e	; 0x33e <SSD_displaynymber>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 294:	2f ef       	ldi	r18, 0xFF	; 255
 296:	84 e3       	ldi	r24, 0x34	; 52
 298:	9c e0       	ldi	r25, 0x0C	; 12
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x5a>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x64>
 2a4:	00 00       	nop
	
	SSD_init();
	u8 counter;
    while (1) 
    {
		for (counter=0;counter<=10;counter++)
 2a6:	cf 5f       	subi	r28, 0xFF	; 255
 2a8:	cb 30       	cpi	r28, 0x0B	; 11
 2aa:	88 f3       	brcs	.-30     	; 0x28e <main+0x4e>
 2ac:	ee cf       	rjmp	.-36     	; 0x28a <main+0x4a>

000002ae <SSD_init>:
#include "DIO_Interface.h"
#include "SSD_interface.h"

void SSD_init(void)//this init for the ssd of amit kit
{
	DIO_SetPin(DIO_PORTB,DIO_PIN1,DIO_PIN_HIGH);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPin>
	DIO_SetPin(DIO_PORTB,DIO_PIN2,DIO_PIN_HIGH);
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	62 e0       	ldi	r22, 0x02	; 2
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPin>
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	63 e0       	ldi	r22, 0x03	; 3
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPin>
 2cc:	08 95       	ret

000002ce <SSD_writeHalfport>:
{
	SSD_writeHalfport(desirednumber);
}

void SSD_writeHalfport(u8 value)
{
 2ce:	cf 93       	push	r28
 2d0:	c8 2f       	mov	r28, r24
	if(1==READ_BIT(value,0))
 2d2:	80 ff       	sbrs	r24, 0
 2d4:	06 c0       	rjmp	.+12     	; 0x2e2 <SSD_writeHalfport+0x14>
	{
		DIO_SetPin(SSD_DATA_PORT,SSD_D4_PIN,DIO_PIN_HIGH);
 2d6:	41 e0       	ldi	r20, 0x01	; 1
 2d8:	64 e0       	ldi	r22, 0x04	; 4
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPin>
 2e0:	05 c0       	rjmp	.+10     	; 0x2ec <SSD_writeHalfport+0x1e>
	}
	else
	{
		DIO_SetPin(SSD_DATA_PORT,SSD_D4_PIN,DIO_PIN_LOW);
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	64 e0       	ldi	r22, 0x04	; 4
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPin>
	}
	
	if(1==READ_BIT(value,1))
 2ec:	c1 ff       	sbrs	r28, 1
 2ee:	06 c0       	rjmp	.+12     	; 0x2fc <SSD_writeHalfport+0x2e>
	{
		DIO_SetPin(SSD_DATA_PORT,SSD_D5_PIN,DIO_PIN_HIGH);
 2f0:	41 e0       	ldi	r20, 0x01	; 1
 2f2:	65 e0       	ldi	r22, 0x05	; 5
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPin>
 2fa:	05 c0       	rjmp	.+10     	; 0x306 <SSD_writeHalfport+0x38>
	}
	else
	{
		DIO_SetPin(SSD_DATA_PORT,SSD_D5_PIN,DIO_PIN_LOW);
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	65 e0       	ldi	r22, 0x05	; 5
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPin>
	}
	
	if(1==READ_BIT(value,2))
 306:	c2 ff       	sbrs	r28, 2
 308:	06 c0       	rjmp	.+12     	; 0x316 <SSD_writeHalfport+0x48>
	{
		DIO_SetPin(SSD_DATA_PORT,SSD_D6_PIN,DIO_PIN_HIGH);
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	66 e0       	ldi	r22, 0x06	; 6
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPin>
 314:	05 c0       	rjmp	.+10     	; 0x320 <SSD_writeHalfport+0x52>
	}
	else
	{
		DIO_SetPin(SSD_DATA_PORT,SSD_D6_PIN,DIO_PIN_LOW);
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	66 e0       	ldi	r22, 0x06	; 6
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPin>
	}
	
	if(1==READ_BIT(value,3))
 320:	c3 ff       	sbrs	r28, 3
 322:	06 c0       	rjmp	.+12     	; 0x330 <SSD_writeHalfport+0x62>
	{
		DIO_SetPin(SSD_DATA_PORT,SSD_D7_PIN,DIO_PIN_HIGH);
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	67 e0       	ldi	r22, 0x07	; 7
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPin>
 32e:	05 c0       	rjmp	.+10     	; 0x33a <SSD_writeHalfport+0x6c>
	}
	else
	{
		DIO_SetPin(SSD_DATA_PORT,SSD_D7_PIN,DIO_PIN_LOW);
 330:	40 e0       	ldi	r20, 0x00	; 0
 332:	67 e0       	ldi	r22, 0x07	; 7
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0e 94 ab 00 	call	0x156	; 0x156 <DIO_SetPin>
	}
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <SSD_displaynymber>:
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
}

void SSD_displaynymber(u8 desirednumber)//this display for amit KIT
{
	SSD_writeHalfport(desirednumber);
 33e:	0e 94 67 01 	call	0x2ce	; 0x2ce <SSD_writeHalfport>
 342:	08 95       	ret

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>

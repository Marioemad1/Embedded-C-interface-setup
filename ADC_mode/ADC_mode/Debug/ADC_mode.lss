
ADC_mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000388  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d0f  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000735  00000000  00000000  00001247  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006fd  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  0000207c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000454  00000000  00000000  000021fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000652  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002ca2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  64:	0c 94 c2 01 	jmp	0x384	; 0x384 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_init>:
#include "ADC_interface.h"

void ADC_init(void)
{
	//using the input VCC on ADC
	SET_BIT(ADMUX,6);
  6c:	87 b1       	in	r24, 0x07	; 7
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX,7);
  72:	87 b1       	in	r24, 0x07	; 7
  74:	8f 77       	andi	r24, 0x7F	; 127
  76:	87 b9       	out	0x07, r24	; 7

	//using the Right adjust
	CLR_BIT(ADMUX,5);
  78:	87 b1       	in	r24, 0x07	; 7
  7a:	8f 7d       	andi	r24, 0xDF	; 223
  7c:	87 b9       	out	0x07, r24	; 7
 
	//reduce the clk of the mc for ADC we WILL div by 128 125kHZ
	SET_BIT(ADCSRA,0);
  7e:	86 b1       	in	r24, 0x06	; 6
  80:	81 60       	ori	r24, 0x01	; 1
  82:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,1);
  84:	86 b1       	in	r24, 0x06	; 6
  86:	82 60       	ori	r24, 0x02	; 2
  88:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,2);
  8a:	86 b1       	in	r24, 0x06	; 6
  8c:	84 60       	ori	r24, 0x04	; 4
  8e:	86 b9       	out	0x06, r24	; 6
 
 
	//Enable the ADC
	SET_BIT(ADCSRA,7);
  90:	86 b1       	in	r24, 0x06	; 6
  92:	80 68       	ori	r24, 0x80	; 128
  94:	86 b9       	out	0x06, r24	; 6
  96:	08 95       	ret

00000098 <ADC_getdigitalvalue>:
}

void ADC_getdigitalvalue(u8 channelnumber,u16* digitalvalue)
{
	//CLEAR MUX channel
	ADMUX&=0b11100000;
  98:	97 b1       	in	r25, 0x07	; 7
  9a:	90 7e       	andi	r25, 0xE0	; 224
  9c:	97 b9       	out	0x07, r25	; 7
	
	//OR with channel number
	ADMUX|=channelnumber;
  9e:	97 b1       	in	r25, 0x07	; 7
  a0:	89 2b       	or	r24, r25
  a2:	87 b9       	out	0x07, r24	; 7
	
	//start converting
	SET_BIT(ADCSRA,6);
  a4:	86 b1       	in	r24, 0x06	; 6
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	86 b9       	out	0x06, r24	; 6
	
	//stuck until i have a value 
	while(0 == READ_BIT(ADCSRA,4));
  aa:	34 9b       	sbis	0x06, 4	; 6
  ac:	fe cf       	rjmp	.-4      	; 0xaa <ADC_getdigitalvalue+0x12>
	
	//Clearing the flag so the ADC can work again
	SET_BIT(ADCSRA,4);
  ae:	86 b1       	in	r24, 0x06	; 6
  b0:	80 61       	ori	r24, 0x10	; 16
  b2:	86 b9       	out	0x06, r24	; 6
	
	//taking the digital value
	*digitalvalue=ADC_u16;
  b4:	84 b1       	in	r24, 0x04	; 4
  b6:	95 b1       	in	r25, 0x05	; 5
  b8:	fb 01       	movw	r30, r22
  ba:	91 83       	std	Z+1, r25	; 0x01
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <DIO_SetPinDirection>:
		{
			*PinValue= DIO_PIN_HIGH;
		}
		else
		{
			*PinValue= DIO_PIN_LOW;
  c0:	81 30       	cpi	r24, 0x01	; 1
  c2:	11 f1       	breq	.+68     	; 0x108 <DIO_SetPinDirection+0x48>
  c4:	30 f0       	brcs	.+12     	; 0xd2 <DIO_SetPinDirection+0x12>
  c6:	82 30       	cpi	r24, 0x02	; 2
  c8:	d1 f1       	breq	.+116    	; 0x13e <DIO_SetPinDirection+0x7e>
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	09 f4       	brne	.+2      	; 0xd0 <DIO_SetPinDirection+0x10>
  ce:	52 c0       	rjmp	.+164    	; 0x174 <DIO_SetPinDirection+0xb4>
  d0:	08 95       	ret
  d2:	41 30       	cpi	r20, 0x01	; 1
  d4:	59 f4       	brne	.+22     	; 0xec <DIO_SetPinDirection+0x2c>
  d6:	2a b3       	in	r18, 0x1a	; 26
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_SetPinDirection+0x22>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_SetPinDirection+0x1e>
  e6:	82 2b       	or	r24, r18
  e8:	8a bb       	out	0x1a, r24	; 26
  ea:	08 95       	ret
  ec:	41 11       	cpse	r20, r1
  ee:	5c c0       	rjmp	.+184    	; 0x1a8 <DIO_SetPinDirection+0xe8>
  f0:	2a b3       	in	r18, 0x1a	; 26
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_SetPinDirection+0x3c>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_SetPinDirection+0x38>
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	8a bb       	out	0x1a, r24	; 26
 106:	08 95       	ret
 108:	41 30       	cpi	r20, 0x01	; 1
 10a:	59 f4       	brne	.+22     	; 0x122 <DIO_SetPinDirection+0x62>
 10c:	27 b3       	in	r18, 0x17	; 23
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_SetPinDirection+0x58>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_SetPinDirection+0x54>
 11c:	82 2b       	or	r24, r18
 11e:	87 bb       	out	0x17, r24	; 23
 120:	08 95       	ret
 122:	41 11       	cpse	r20, r1
 124:	41 c0       	rjmp	.+130    	; 0x1a8 <DIO_SetPinDirection+0xe8>
 126:	27 b3       	in	r18, 0x17	; 23
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_SetPinDirection+0x72>
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_SetPinDirection+0x6e>
 136:	80 95       	com	r24
 138:	82 23       	and	r24, r18
 13a:	87 bb       	out	0x17, r24	; 23
 13c:	08 95       	ret
 13e:	41 30       	cpi	r20, 0x01	; 1
 140:	59 f4       	brne	.+22     	; 0x158 <DIO_SetPinDirection+0x98>
 142:	24 b3       	in	r18, 0x14	; 20
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_SetPinDirection+0x8e>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_SetPinDirection+0x8a>
 152:	82 2b       	or	r24, r18
 154:	84 bb       	out	0x14, r24	; 20
 156:	08 95       	ret
 158:	41 11       	cpse	r20, r1
 15a:	26 c0       	rjmp	.+76     	; 0x1a8 <DIO_SetPinDirection+0xe8>
 15c:	24 b3       	in	r18, 0x14	; 20
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_SetPinDirection+0xa8>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_SetPinDirection+0xa4>
 16c:	80 95       	com	r24
 16e:	82 23       	and	r24, r18
 170:	84 bb       	out	0x14, r24	; 20
 172:	08 95       	ret
 174:	41 30       	cpi	r20, 0x01	; 1
 176:	59 f4       	brne	.+22     	; 0x18e <DIO_SetPinDirection+0xce>
 178:	21 b3       	in	r18, 0x11	; 17
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_SetPinDirection+0xc4>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_SetPinDirection+0xc0>
 188:	82 2b       	or	r24, r18
 18a:	81 bb       	out	0x11, r24	; 17
 18c:	08 95       	ret
 18e:	41 11       	cpse	r20, r1
 190:	0b c0       	rjmp	.+22     	; 0x1a8 <DIO_SetPinDirection+0xe8>
 192:	21 b3       	in	r18, 0x11	; 17
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_SetPinDirection+0xde>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_SetPinDirection+0xda>
 1a2:	80 95       	com	r24
 1a4:	82 23       	and	r24, r18
 1a6:	81 bb       	out	0x11, r24	; 17
 1a8:	08 95       	ret

000001aa <DIO_SetPin>:
	}
}

void DIO_SetPin(u8 PortId,u8 PinId,u8 PinValue)
{
	switch(PortId)
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	11 f1       	breq	.+68     	; 0x1f2 <DIO_SetPin+0x48>
 1ae:	30 f0       	brcs	.+12     	; 0x1bc <DIO_SetPin+0x12>
 1b0:	82 30       	cpi	r24, 0x02	; 2
 1b2:	d1 f1       	breq	.+116    	; 0x228 <DIO_SetPin+0x7e>
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	09 f4       	brne	.+2      	; 0x1ba <DIO_SetPin+0x10>
 1b8:	52 c0       	rjmp	.+164    	; 0x25e <DIO_SetPin+0xb4>
 1ba:	08 95       	ret
	{
		case DIO_PORTA:
		if(DIO_PIN_HIGH == PinValue)
 1bc:	41 30       	cpi	r20, 0x01	; 1
 1be:	59 f4       	brne	.+22     	; 0x1d6 <DIO_SetPin+0x2c>
		{
			SET_BIT(PORTA,PinId);
 1c0:	2b b3       	in	r18, 0x1b	; 27
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_SetPin+0x22>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_SetPin+0x1e>
 1d0:	82 2b       	or	r24, r18
 1d2:	8b bb       	out	0x1b, r24	; 27
 1d4:	08 95       	ret
		}
		else if(DIO_PIN_LOW == PinValue)
 1d6:	41 11       	cpse	r20, r1
 1d8:	5c c0       	rjmp	.+184    	; 0x292 <DIO_SetPin+0xe8>
		{
			CLR_BIT(PORTA,PinId);
 1da:	2b b3       	in	r18, 0x1b	; 27
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_SetPin+0x3c>
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	6a 95       	dec	r22
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_SetPin+0x38>
 1ea:	80 95       	com	r24
 1ec:	82 23       	and	r24, r18
 1ee:	8b bb       	out	0x1b, r24	; 27
 1f0:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		if(DIO_PIN_HIGH == PinValue)
 1f2:	41 30       	cpi	r20, 0x01	; 1
 1f4:	59 f4       	brne	.+22     	; 0x20c <DIO_SetPin+0x62>
		{
			SET_BIT(PORTB,PinId);
 1f6:	28 b3       	in	r18, 0x18	; 24
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_SetPin+0x58>
 1fe:	88 0f       	add	r24, r24
 200:	99 1f       	adc	r25, r25
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_SetPin+0x54>
 206:	82 2b       	or	r24, r18
 208:	88 bb       	out	0x18, r24	; 24
 20a:	08 95       	ret
		}
		else if(DIO_PIN_LOW == PinValue)
 20c:	41 11       	cpse	r20, r1
 20e:	41 c0       	rjmp	.+130    	; 0x292 <DIO_SetPin+0xe8>
		{
			CLR_BIT(PORTB,PinId);
 210:	28 b3       	in	r18, 0x18	; 24
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_SetPin+0x72>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_SetPin+0x6e>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	88 bb       	out	0x18, r24	; 24
 226:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		if(DIO_PIN_HIGH == PinValue)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	59 f4       	brne	.+22     	; 0x242 <DIO_SetPin+0x98>
		{
			SET_BIT(PORTC,PinId);
 22c:	25 b3       	in	r18, 0x15	; 21
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_SetPin+0x8e>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_SetPin+0x8a>
 23c:	82 2b       	or	r24, r18
 23e:	85 bb       	out	0x15, r24	; 21
 240:	08 95       	ret
		}
		else if(DIO_PIN_LOW == PinValue)
 242:	41 11       	cpse	r20, r1
 244:	26 c0       	rjmp	.+76     	; 0x292 <DIO_SetPin+0xe8>
		{
			CLR_BIT(PORTC,PinId);
 246:	25 b3       	in	r18, 0x15	; 21
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_SetPin+0xa8>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_SetPin+0xa4>
 256:	80 95       	com	r24
 258:	82 23       	and	r24, r18
 25a:	85 bb       	out	0x15, r24	; 21
 25c:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		if(DIO_PIN_HIGH == PinValue)
 25e:	41 30       	cpi	r20, 0x01	; 1
 260:	59 f4       	brne	.+22     	; 0x278 <DIO_SetPin+0xce>
		{
			SET_BIT(PORTD,PinId);
 262:	22 b3       	in	r18, 0x12	; 18
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_SetPin+0xc4>
 26a:	88 0f       	add	r24, r24
 26c:	99 1f       	adc	r25, r25
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_SetPin+0xc0>
 272:	82 2b       	or	r24, r18
 274:	82 bb       	out	0x12, r24	; 18
 276:	08 95       	ret
		}
		else if(DIO_PIN_LOW == PinValue)
 278:	41 11       	cpse	r20, r1
 27a:	0b c0       	rjmp	.+22     	; 0x292 <DIO_SetPin+0xe8>
		{
			CLR_BIT(PORTD,PinId);
 27c:	22 b3       	in	r18, 0x12	; 18
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_SetPin+0xde>
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	6a 95       	dec	r22
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_SetPin+0xda>
 28c:	80 95       	com	r24
 28e:	82 23       	and	r24, r18
 290:	82 bb       	out	0x12, r24	; 18
 292:	08 95       	ret

00000294 <LED_ON>:
{
	DIO_SetPinDirection(PortId,PinId,DIO_PIN_OUTPUT);
}
void LED_ON  (u8 PortId,u8 PinId)
{
	 DIO_SetPin( PortId, PinId, DIO_PIN_HIGH);
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_SetPin>
 29a:	08 95       	ret

0000029c <LED_OFF>:
}
void LED_OFF   (u8 PortId,u8 PinId)
{
	DIO_SetPin( PortId, PinId, DIO_PIN_LOW);
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <DIO_SetPin>
 2a2:	08 95       	ret

000002a4 <main>:
#include "LED_interface.h"



int main(void)
{
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <main+0x6>
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
	//ADC CONVERTER PIN
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN1,DIO_PIN_INPUT);
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_SetPinDirection>
	
	//LEDS PINS
	DIO_SetPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
 2b8:	41 e0       	ldi	r20, 0x01	; 1
 2ba:	62 e0       	ldi	r22, 0x02	; 2
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_OUTPUT);
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	67 e0       	ldi	r22, 0x07	; 7
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN3,DIO_PIN_OUTPUT);
 2cc:	41 e0       	ldi	r20, 0x01	; 1
 2ce:	63 e0       	ldi	r22, 0x03	; 3
 2d0:	83 e0       	ldi	r24, 0x03	; 3
 2d2:	0e 94 60 00 	call	0xc0	; 0xc0 <DIO_SetPinDirection>
	
	ADC_init();
 2d6:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_init>
	u16 digitalvalue,analogvalue;
    while (1) 
    {
		ADC_getdigitalvalue(ADC_CHANNEL1,&digitalvalue);
 2da:	be 01       	movw	r22, r28
 2dc:	6f 5f       	subi	r22, 0xFF	; 255
 2de:	7f 4f       	sbci	r23, 0xFF	; 255
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 4c 00 	call	0x98	; 0x98 <ADC_getdigitalvalue>
		
		analogvalue=(((u32)digitalvalue*5000UL)/1024);
 2e6:	29 81       	ldd	r18, Y+1	; 0x01
 2e8:	3a 81       	ldd	r19, Y+2	; 0x02
 2ea:	a8 e8       	ldi	r26, 0x88	; 136
 2ec:	b3 e1       	ldi	r27, 0x13	; 19
 2ee:	0e 94 b3 01 	call	0x366	; 0x366 <__umulhisi3>
 2f2:	dc 01       	movw	r26, r24
 2f4:	cb 01       	movw	r24, r22
 2f6:	07 2e       	mov	r0, r23
 2f8:	7a e0       	ldi	r23, 0x0A	; 10
 2fa:	b6 95       	lsr	r27
 2fc:	a7 95       	ror	r26
 2fe:	97 95       	ror	r25
 300:	87 95       	ror	r24
 302:	7a 95       	dec	r23
 304:	d1 f7       	brne	.-12     	; 0x2fa <main+0x56>
 306:	70 2d       	mov	r23, r0
 308:	bc 01       	movw	r22, r24
		
		if (analogvalue < 1500)
 30a:	6c 3d       	cpi	r22, 0xDC	; 220
 30c:	85 e0       	ldi	r24, 0x05	; 5
 30e:	78 07       	cpc	r23, r24
 310:	68 f4       	brcc	.+26     	; 0x32c <main+0x88>
		{
			LED_ON (DIO_PORTC,DIO_PIN2);
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	0e 94 4a 01 	call	0x294	; 0x294 <LED_ON>
			LED_OFF(DIO_PORTC,DIO_PIN7);
 31a:	67 e0       	ldi	r22, 0x07	; 7
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_OFF>
			LED_OFF(DIO_PORTD,DIO_PIN3);
 322:	63 e0       	ldi	r22, 0x03	; 3
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_OFF>
 32a:	d7 cf       	rjmp	.-82     	; 0x2da <main+0x36>
		}
		else if (analogvalue < 3000)
 32c:	68 3b       	cpi	r22, 0xB8	; 184
 32e:	7b 40       	sbci	r23, 0x0B	; 11
 330:	68 f4       	brcc	.+26     	; 0x34c <main+0xa8>
		{
			LED_OFF (DIO_PORTC,DIO_PIN2);
 332:	62 e0       	ldi	r22, 0x02	; 2
 334:	82 e0       	ldi	r24, 0x02	; 2
 336:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_OFF>
			LED_ON  (DIO_PORTC,DIO_PIN7);
 33a:	67 e0       	ldi	r22, 0x07	; 7
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	0e 94 4a 01 	call	0x294	; 0x294 <LED_ON>
			LED_OFF (DIO_PORTD,DIO_PIN3);
 342:	63 e0       	ldi	r22, 0x03	; 3
 344:	83 e0       	ldi	r24, 0x03	; 3
 346:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_OFF>
 34a:	c7 cf       	rjmp	.-114    	; 0x2da <main+0x36>
		}
		else
		{
			LED_OFF (DIO_PORTC,DIO_PIN2);
 34c:	62 e0       	ldi	r22, 0x02	; 2
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_OFF>
			LED_OFF (DIO_PORTC,DIO_PIN7);
 354:	67 e0       	ldi	r22, 0x07	; 7
 356:	82 e0       	ldi	r24, 0x02	; 2
 358:	0e 94 4e 01 	call	0x29c	; 0x29c <LED_OFF>
			LED_ON  (DIO_PORTD,DIO_PIN3);
 35c:	63 e0       	ldi	r22, 0x03	; 3
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	0e 94 4a 01 	call	0x294	; 0x294 <LED_ON>
 364:	ba cf       	rjmp	.-140    	; 0x2da <main+0x36>

00000366 <__umulhisi3>:
 366:	a2 9f       	mul	r26, r18
 368:	b0 01       	movw	r22, r0
 36a:	b3 9f       	mul	r27, r19
 36c:	c0 01       	movw	r24, r0
 36e:	a3 9f       	mul	r26, r19
 370:	70 0d       	add	r23, r0
 372:	81 1d       	adc	r24, r1
 374:	11 24       	eor	r1, r1
 376:	91 1d       	adc	r25, r1
 378:	b2 9f       	mul	r27, r18
 37a:	70 0d       	add	r23, r0
 37c:	81 1d       	adc	r24, r1
 37e:	11 24       	eor	r1, r1
 380:	91 1d       	adc	r25, r1
 382:	08 95       	ret

00000384 <_exit>:
 384:	f8 94       	cli

00000386 <__stop_program>:
 386:	ff cf       	rjmp	.-2      	; 0x386 <__stop_program>


LCD_MODE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000524  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000524  00000598  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000059e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000135c  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007cf  00000000  00000000  00001a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009a1  00000000  00000000  00002217  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00002bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004c6  00000000  00000000  00002d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ab8  00000000  00000000  00003212  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003cca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e2       	ldi	r30, 0x24	; 36
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 54 02 	call	0x4a8	; 0x4a8 <main>
  7a:	0c 94 90 02 	jmp	0x520	; 0x520 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPinDirection>:
		{
			*PinValue= DIO_PIN_HIGH;
		}
		else
		{
			*PinValue= DIO_PIN_LOW;
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	11 f1       	breq	.+68     	; 0xca <DIO_SetPinDirection+0x48>
  86:	30 f0       	brcs	.+12     	; 0x94 <DIO_SetPinDirection+0x12>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	d1 f1       	breq	.+116    	; 0x100 <DIO_SetPinDirection+0x7e>
  8c:	83 30       	cpi	r24, 0x03	; 3
  8e:	09 f4       	brne	.+2      	; 0x92 <DIO_SetPinDirection+0x10>
  90:	52 c0       	rjmp	.+164    	; 0x136 <DIO_SetPinDirection+0xb4>
  92:	08 95       	ret
  94:	41 30       	cpi	r20, 0x01	; 1
  96:	59 f4       	brne	.+22     	; 0xae <DIO_SetPinDirection+0x2c>
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_SetPinDirection+0x22>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_SetPinDirection+0x1e>
  a8:	82 2b       	or	r24, r18
  aa:	8a bb       	out	0x1a, r24	; 26
  ac:	08 95       	ret
  ae:	41 11       	cpse	r20, r1
  b0:	5c c0       	rjmp	.+184    	; 0x16a <DIO_SetPinDirection+0xe8>
  b2:	2a b3       	in	r18, 0x1a	; 26
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPinDirection+0x3c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPinDirection+0x38>
  c2:	80 95       	com	r24
  c4:	82 23       	and	r24, r18
  c6:	8a bb       	out	0x1a, r24	; 26
  c8:	08 95       	ret
  ca:	41 30       	cpi	r20, 0x01	; 1
  cc:	59 f4       	brne	.+22     	; 0xe4 <DIO_SetPinDirection+0x62>
  ce:	27 b3       	in	r18, 0x17	; 23
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_SetPinDirection+0x58>
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	6a 95       	dec	r22
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_SetPinDirection+0x54>
  de:	82 2b       	or	r24, r18
  e0:	87 bb       	out	0x17, r24	; 23
  e2:	08 95       	ret
  e4:	41 11       	cpse	r20, r1
  e6:	41 c0       	rjmp	.+130    	; 0x16a <DIO_SetPinDirection+0xe8>
  e8:	27 b3       	in	r18, 0x17	; 23
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_SetPinDirection+0x72>
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	6a 95       	dec	r22
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_SetPinDirection+0x6e>
  f8:	80 95       	com	r24
  fa:	82 23       	and	r24, r18
  fc:	87 bb       	out	0x17, r24	; 23
  fe:	08 95       	ret
 100:	41 30       	cpi	r20, 0x01	; 1
 102:	59 f4       	brne	.+22     	; 0x11a <DIO_SetPinDirection+0x98>
 104:	24 b3       	in	r18, 0x14	; 20
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_SetPinDirection+0x8e>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_SetPinDirection+0x8a>
 114:	82 2b       	or	r24, r18
 116:	84 bb       	out	0x14, r24	; 20
 118:	08 95       	ret
 11a:	41 11       	cpse	r20, r1
 11c:	26 c0       	rjmp	.+76     	; 0x16a <DIO_SetPinDirection+0xe8>
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_SetPinDirection+0xa8>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_SetPinDirection+0xa4>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
 136:	41 30       	cpi	r20, 0x01	; 1
 138:	59 f4       	brne	.+22     	; 0x150 <DIO_SetPinDirection+0xce>
 13a:	21 b3       	in	r18, 0x11	; 17
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_SetPinDirection+0xc4>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_SetPinDirection+0xc0>
 14a:	82 2b       	or	r24, r18
 14c:	81 bb       	out	0x11, r24	; 17
 14e:	08 95       	ret
 150:	41 11       	cpse	r20, r1
 152:	0b c0       	rjmp	.+22     	; 0x16a <DIO_SetPinDirection+0xe8>
 154:	21 b3       	in	r18, 0x11	; 17
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_SetPinDirection+0xde>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_SetPinDirection+0xda>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	81 bb       	out	0x11, r24	; 17
 16a:	08 95       	ret

0000016c <DIO_SetPin>:
	}
}

void DIO_SetPin(u8 PortId,u8 PinId,u8 PinValue)
{
	switch(PortId)
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	11 f1       	breq	.+68     	; 0x1b4 <DIO_SetPin+0x48>
 170:	30 f0       	brcs	.+12     	; 0x17e <DIO_SetPin+0x12>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	d1 f1       	breq	.+116    	; 0x1ea <DIO_SetPin+0x7e>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	09 f4       	brne	.+2      	; 0x17c <DIO_SetPin+0x10>
 17a:	52 c0       	rjmp	.+164    	; 0x220 <DIO_SetPin+0xb4>
 17c:	08 95       	ret
	{
		case DIO_PORTA:
		if(DIO_PIN_HIGH == PinValue)
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	59 f4       	brne	.+22     	; 0x198 <DIO_SetPin+0x2c>
		{
			SET_BIT(PORTA,PinId);
 182:	2b b3       	in	r18, 0x1b	; 27
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_SetPin+0x22>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_SetPin+0x1e>
 192:	82 2b       	or	r24, r18
 194:	8b bb       	out	0x1b, r24	; 27
 196:	08 95       	ret
		}
		else if(DIO_PIN_LOW == PinValue)
 198:	41 11       	cpse	r20, r1
 19a:	5c c0       	rjmp	.+184    	; 0x254 <DIO_SetPin+0xe8>
		{
			CLR_BIT(PORTA,PinId);
 19c:	2b b3       	in	r18, 0x1b	; 27
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_SetPin+0x3c>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_SetPin+0x38>
 1ac:	80 95       	com	r24
 1ae:	82 23       	and	r24, r18
 1b0:	8b bb       	out	0x1b, r24	; 27
 1b2:	08 95       	ret
		}
		break;
		
		case DIO_PORTB:
		if(DIO_PIN_HIGH == PinValue)
 1b4:	41 30       	cpi	r20, 0x01	; 1
 1b6:	59 f4       	brne	.+22     	; 0x1ce <DIO_SetPin+0x62>
		{
			SET_BIT(PORTB,PinId);
 1b8:	28 b3       	in	r18, 0x18	; 24
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_SetPin+0x58>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_SetPin+0x54>
 1c8:	82 2b       	or	r24, r18
 1ca:	88 bb       	out	0x18, r24	; 24
 1cc:	08 95       	ret
		}
		else if(DIO_PIN_LOW == PinValue)
 1ce:	41 11       	cpse	r20, r1
 1d0:	41 c0       	rjmp	.+130    	; 0x254 <DIO_SetPin+0xe8>
		{
			CLR_BIT(PORTB,PinId);
 1d2:	28 b3       	in	r18, 0x18	; 24
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_SetPin+0x72>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_SetPin+0x6e>
 1e2:	80 95       	com	r24
 1e4:	82 23       	and	r24, r18
 1e6:	88 bb       	out	0x18, r24	; 24
 1e8:	08 95       	ret
		}
		break;
		
		case DIO_PORTC:
		if(DIO_PIN_HIGH == PinValue)
 1ea:	41 30       	cpi	r20, 0x01	; 1
 1ec:	59 f4       	brne	.+22     	; 0x204 <DIO_SetPin+0x98>
		{
			SET_BIT(PORTC,PinId);
 1ee:	25 b3       	in	r18, 0x15	; 21
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_SetPin+0x8e>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_SetPin+0x8a>
 1fe:	82 2b       	or	r24, r18
 200:	85 bb       	out	0x15, r24	; 21
 202:	08 95       	ret
		}
		else if(DIO_PIN_LOW == PinValue)
 204:	41 11       	cpse	r20, r1
 206:	26 c0       	rjmp	.+76     	; 0x254 <DIO_SetPin+0xe8>
		{
			CLR_BIT(PORTC,PinId);
 208:	25 b3       	in	r18, 0x15	; 21
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_SetPin+0xa8>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_SetPin+0xa4>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
		}
		break;
		
		case DIO_PORTD:
		if(DIO_PIN_HIGH == PinValue)
 220:	41 30       	cpi	r20, 0x01	; 1
 222:	59 f4       	brne	.+22     	; 0x23a <DIO_SetPin+0xce>
		{
			SET_BIT(PORTD,PinId);
 224:	22 b3       	in	r18, 0x12	; 18
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_SetPin+0xc4>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_SetPin+0xc0>
 234:	82 2b       	or	r24, r18
 236:	82 bb       	out	0x12, r24	; 18
 238:	08 95       	ret
		}
		else if(DIO_PIN_LOW == PinValue)
 23a:	41 11       	cpse	r20, r1
 23c:	0b c0       	rjmp	.+22     	; 0x254 <DIO_SetPin+0xe8>
		{
			CLR_BIT(PORTD,PinId);
 23e:	22 b3       	in	r18, 0x12	; 18
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_SetPin+0xde>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_SetPin+0xda>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	82 bb       	out	0x12, r24	; 18
 254:	08 95       	ret

00000256 <LCD_writeHalfport>:

	
}

void LCD_writeHalfport(u8 value)
{
 256:	cf 93       	push	r28
 258:	c8 2f       	mov	r28, r24
	if(1==READ_BIT(value,0))
 25a:	80 ff       	sbrs	r24, 0
 25c:	06 c0       	rjmp	.+12     	; 0x26a <LCD_writeHalfport+0x14>
	{
		DIO_SetPin(DIO_PORTA,DIO_PIN4,DIO_PIN_HIGH);
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	64 e0       	ldi	r22, 0x04	; 4
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
 268:	05 c0       	rjmp	.+10     	; 0x274 <LCD_writeHalfport+0x1e>
	}
	else
	{
		DIO_SetPin(DIO_PORTA,DIO_PIN4,DIO_PIN_LOW);
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	64 e0       	ldi	r22, 0x04	; 4
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
	}
	
	if(1==READ_BIT(value,1))
 274:	c1 ff       	sbrs	r28, 1
 276:	06 c0       	rjmp	.+12     	; 0x284 <LCD_writeHalfport+0x2e>
	{
		DIO_SetPin(DIO_PORTA,DIO_PIN5,DIO_PIN_HIGH);
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	65 e0       	ldi	r22, 0x05	; 5
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
 282:	05 c0       	rjmp	.+10     	; 0x28e <LCD_writeHalfport+0x38>
	}
	else
	{
		DIO_SetPin(DIO_PORTA,DIO_PIN5,DIO_PIN_LOW);
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	65 e0       	ldi	r22, 0x05	; 5
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
	}
	
	if(1==READ_BIT(value,2))
 28e:	c2 ff       	sbrs	r28, 2
 290:	06 c0       	rjmp	.+12     	; 0x29e <LCD_writeHalfport+0x48>
	{
		DIO_SetPin(DIO_PORTA,DIO_PIN6,DIO_PIN_HIGH);
 292:	41 e0       	ldi	r20, 0x01	; 1
 294:	66 e0       	ldi	r22, 0x06	; 6
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
 29c:	05 c0       	rjmp	.+10     	; 0x2a8 <LCD_writeHalfport+0x52>
	}
	else
	{
		DIO_SetPin(DIO_PORTA,DIO_PIN6,DIO_PIN_LOW);
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	66 e0       	ldi	r22, 0x06	; 6
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
	}
	
	if(1==READ_BIT(value,3))
 2a8:	c3 ff       	sbrs	r28, 3
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <LCD_writeHalfport+0x62>
	{
		DIO_SetPin(DIO_PORTA,DIO_PIN7,DIO_PIN_HIGH);
 2ac:	41 e0       	ldi	r20, 0x01	; 1
 2ae:	67 e0       	ldi	r22, 0x07	; 7
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
 2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <LCD_writeHalfport+0x6c>
	}
	else
	{
		DIO_SetPin(DIO_PORTA,DIO_PIN7,DIO_PIN_LOW);
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	67 e0       	ldi	r22, 0x07	; 7
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
	}
}
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <LCD_sendcmnd>:
#define  F_CPU 16000000
#include <util/delay.h>


void LCD_sendcmnd(u8 cmnd)
{
 2c6:	cf 93       	push	r28
 2c8:	c8 2f       	mov	r28, r24
	//set the RS to 0 for command lines 
	DIO_SetPin(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
	
	//SET THE R/W REG TO 0 FOR WRITEING
	DIO_SetPin(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
 2d4:	40 e0       	ldi	r20, 0x00	; 0
 2d6:	62 e0       	ldi	r22, 0x02	; 2
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
	//THE MOST FIRST
	LCD_writeHalfport(cmnd>>4);
 2de:	8c 2f       	mov	r24, r28
 2e0:	82 95       	swap	r24
 2e2:	8f 70       	andi	r24, 0x0F	; 15
 2e4:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_writeHalfport>
	
	//DELAY
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	63 e0       	ldi	r22, 0x03	; 3
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f2:	8f e9       	ldi	r24, 0x9F	; 159
 2f4:	9f e0       	ldi	r25, 0x0F	; 15
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <LCD_sendcmnd+0x30>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <LCD_sendcmnd+0x36>
 2fc:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	63 e0       	ldi	r22, 0x03	; 3
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
	
	//THE LEAST
	LCD_writeHalfport(cmnd);
 308:	8c 2f       	mov	r24, r28
 30a:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_writeHalfport>
	
	//DELAY
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	63 e0       	ldi	r22, 0x03	; 3
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
 318:	8f e9       	ldi	r24, 0x9F	; 159
 31a:	9f e0       	ldi	r25, 0x0F	; 15
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCD_sendcmnd+0x56>
 320:	00 c0       	rjmp	.+0      	; 0x322 <LCD_sendcmnd+0x5c>
 322:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	63 e0       	ldi	r22, 0x03	; 3
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
	
	
}
 32e:	cf 91       	pop	r28
 330:	08 95       	ret

00000332 <LCD_sendchar>:

void LCD_sendchar(u8 data)
{
 332:	cf 93       	push	r28
 334:	c8 2f       	mov	r28, r24
	//set the RS to 1 for Data lines
	DIO_SetPin(DIO_PORTB,DIO_PIN1,DIO_PIN_HIGH);
 336:	41 e0       	ldi	r20, 0x01	; 1
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
	
	//SET THE R/W REG TO 0 FOR WRITEING
	DIO_SetPin(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
	//THE MOST FIRST
	LCD_writeHalfport(data>>4);
 34a:	8c 2f       	mov	r24, r28
 34c:	82 95       	swap	r24
 34e:	8f 70       	andi	r24, 0x0F	; 15
 350:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_writeHalfport>
	
	//DELAY
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 354:	41 e0       	ldi	r20, 0x01	; 1
 356:	63 e0       	ldi	r22, 0x03	; 3
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
 35e:	8f e9       	ldi	r24, 0x9F	; 159
 360:	9f e0       	ldi	r25, 0x0F	; 15
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <LCD_sendchar+0x30>
 366:	00 c0       	rjmp	.+0      	; 0x368 <LCD_sendchar+0x36>
 368:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	63 e0       	ldi	r22, 0x03	; 3
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
	
	//THE LEAST
	LCD_writeHalfport(data);
 374:	8c 2f       	mov	r24, r28
 376:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_writeHalfport>
	
	//DELAY
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 37a:	41 e0       	ldi	r20, 0x01	; 1
 37c:	63 e0       	ldi	r22, 0x03	; 3
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
 384:	8f e9       	ldi	r24, 0x9F	; 159
 386:	9f e0       	ldi	r25, 0x0F	; 15
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	f1 f7       	brne	.-4      	; 0x388 <LCD_sendchar+0x56>
 38c:	00 c0       	rjmp	.+0      	; 0x38e <LCD_sendchar+0x5c>
 38e:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 390:	40 e0       	ldi	r20, 0x00	; 0
 392:	63 e0       	ldi	r22, 0x03	; 3
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
}
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <LCD_init>:
 39e:	2f ef       	ldi	r18, 0xFF	; 255
 3a0:	83 ef       	ldi	r24, 0xF3	; 243
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	21 50       	subi	r18, 0x01	; 1
 3a6:	80 40       	sbci	r24, 0x00	; 0
 3a8:	90 40       	sbci	r25, 0x00	; 0
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <LCD_init+0x6>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <LCD_init+0x10>
 3ae:	00 00       	nop

void LCD_init(void)
{
	_delay_ms(40);
	//set the RS to 0 for Command lines
	DIO_SetPin(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
	
	//SET THE R/W REG TO 0 FOR WRITEING
	DIO_SetPin(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	62 e0       	ldi	r22, 0x02	; 2
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
	
	LCD_writeHalfport(0b0010);
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_writeHalfport>
	
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_HIGH);
 3ca:	41 e0       	ldi	r20, 0x01	; 1
 3cc:	63 e0       	ldi	r22, 0x03	; 3
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
 3d4:	8f e9       	ldi	r24, 0x9F	; 159
 3d6:	9f e0       	ldi	r25, 0x0F	; 15
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <LCD_init+0x3a>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <LCD_init+0x40>
 3de:	00 00       	nop
	_delay_ms(1);
	DIO_SetPin(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	63 e0       	ldi	r22, 0x03	; 3
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	0e 94 b6 00 	call	0x16c	; 0x16c <DIO_SetPin>
	
	LCD_sendcmnd(0b00101000);
 3ea:	88 e2       	ldi	r24, 0x28	; 40
 3ec:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_sendcmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f0:	90 ef       	ldi	r25, 0xF0	; 240
 3f2:	9a 95       	dec	r25
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <LCD_init+0x54>
	
	_delay_us(45);
	
	//00001display,courser,blink
	LCD_sendcmnd(0b00001111);
 3f6:	8f e0       	ldi	r24, 0x0F	; 15
 3f8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_sendcmnd>
 3fc:	20 ef       	ldi	r18, 0xF0	; 240
 3fe:	2a 95       	dec	r18
 400:	f1 f7       	brne	.-4      	; 0x3fe <LCD_init+0x60>
	
	_delay_us(45);
	
	LCD_sendcmnd(0b00000001);
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_sendcmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 408:	8f e3       	ldi	r24, 0x3F	; 63
 40a:	9f e1       	ldi	r25, 0x1F	; 31
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 412:	00 00       	nop
	
	_delay_ms(2);
	
	LCD_sendcmnd(0b00000110);
 414:	86 e0       	ldi	r24, 0x06	; 6
 416:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_sendcmnd>
 41a:	9f ef       	ldi	r25, 0xFF	; 255
 41c:	20 e7       	ldi	r18, 0x70	; 112
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	91 50       	subi	r25, 0x01	; 1
 422:	20 40       	sbci	r18, 0x00	; 0
 424:	80 40       	sbci	r24, 0x00	; 0
 426:	e1 f7       	brne	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
 42c:	08 95       	ret

0000042e <LCD_sendword>:
		DIO_SetPin(DIO_PORTA,DIO_PIN7,DIO_PIN_LOW);
	}
}

void LCD_sendword(u8* ptr)
{
 42e:	0f 93       	push	r16
 430:	1f 93       	push	r17
 432:	cf 93       	push	r28
 434:	8c 01       	movw	r16, r24
	u8 counter=0;
 436:	c0 e0       	ldi	r28, 0x00	; 0
	while(ptr[counter]!='\0')
 438:	03 c0       	rjmp	.+6      	; 0x440 <LCD_sendword+0x12>
	{
		LCD_sendchar(ptr[counter]);
 43a:	0e 94 99 01 	call	0x332	; 0x332 <LCD_sendchar>
		counter++;
 43e:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_sendword(u8* ptr)
{
	u8 counter=0;
	while(ptr[counter]!='\0')
 440:	f8 01       	movw	r30, r16
 442:	ec 0f       	add	r30, r28
 444:	f1 1d       	adc	r31, r1
 446:	80 81       	ld	r24, Z
 448:	81 11       	cpse	r24, r1
 44a:	f7 cf       	rjmp	.-18     	; 0x43a <LCD_sendword+0xc>
	{
		LCD_sendchar(ptr[counter]);
		counter++;
	}
}
 44c:	cf 91       	pop	r28
 44e:	1f 91       	pop	r17
 450:	0f 91       	pop	r16
 452:	08 95       	ret

00000454 <LCD_clearscreen>:
void LCD_clearscreen(void)
{
	LCD_sendcmnd(0b00000001);
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_sendcmnd>
 45a:	8f e3       	ldi	r24, 0x3F	; 63
 45c:	9f e1       	ldi	r25, 0x1F	; 31
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <LCD_clearscreen+0xa>
 462:	00 c0       	rjmp	.+0      	; 0x464 <LCD_clearscreen+0x10>
 464:	00 00       	nop
 466:	08 95       	ret

00000468 <LCD_shift>:
	_delay_ms(2);
}

void LCD_shift(u8 shiftdir)
{
	if(LCD_SHIFT_LEFT == shiftdir )
 468:	81 11       	cpse	r24, r1
 46a:	07 c0       	rjmp	.+14     	; 0x47a <LCD_shift+0x12>
	{
		LCD_sendcmnd(0b00011000);
 46c:	88 e1       	ldi	r24, 0x18	; 24
 46e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_sendcmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 472:	80 ef       	ldi	r24, 0xF0	; 240
 474:	8a 95       	dec	r24
 476:	f1 f7       	brne	.-4      	; 0x474 <LCD_shift+0xc>
 478:	08 95       	ret
		_delay_us(45);
	}
	else if (LCD_SHIFT_RIGHT == shiftdir )
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	31 f4       	brne	.+12     	; 0x48a <LCD_shift+0x22>
	{
		LCD_sendcmnd(0b00011100);
 47e:	8c e1       	ldi	r24, 0x1C	; 28
 480:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_sendcmnd>
 484:	80 ef       	ldi	r24, 0xF0	; 240
 486:	8a 95       	dec	r24
 488:	f1 f7       	brne	.-4      	; 0x486 <LCD_shift+0x1e>
 48a:	08 95       	ret

0000048c <LCD_gotoposition>:
		_delay_us(45);
	}
}
void LCD_gotoposition(u8 line,u8 position)
{
	if(1 == line)
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	29 f4       	brne	.+10     	; 0x49a <LCD_gotoposition+0xe>
	{
		LCD_sendcmnd(0x80 + position);
 490:	80 e8       	ldi	r24, 0x80	; 128
 492:	86 0f       	add	r24, r22
 494:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_sendcmnd>
 498:	08 95       	ret
		
	}
	else if(2 == line)
 49a:	82 30       	cpi	r24, 0x02	; 2
 49c:	21 f4       	brne	.+8      	; 0x4a6 <LCD_gotoposition+0x1a>
	{
		LCD_sendcmnd (0xC0+ position);
 49e:	80 ec       	ldi	r24, 0xC0	; 192
 4a0:	86 0f       	add	r24, r22
 4a2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <LCD_sendcmnd>
 4a6:	08 95       	ret

000004a8 <main>:



int main(void)
{
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 4a8:	41 e0       	ldi	r20, 0x01	; 1
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 4b2:	41 e0       	ldi	r20, 0x01	; 1
 4b4:	62 e0       	ldi	r22, 0x02	; 2
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 4bc:	41 e0       	ldi	r20, 0x01	; 1
 4be:	63 e0       	ldi	r22, 0x03	; 3
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	64 e0       	ldi	r22, 0x04	; 4
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 4d0:	41 e0       	ldi	r20, 0x01	; 1
 4d2:	65 e0       	ldi	r22, 0x05	; 5
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 4da:	41 e0       	ldi	r20, 0x01	; 1
 4dc:	66 e0       	ldi	r22, 0x06	; 6
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 4e4:	41 e0       	ldi	r20, 0x01	; 1
 4e6:	67 e0       	ldi	r22, 0x07	; 7
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	
	
	LCD_init();
 4ee:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_init>
	LCD_gotoposition(2,0);
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_gotoposition>
	LCD_sendword("MARIO");	
 4fa:	80 e6       	ldi	r24, 0x60	; 96
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 17 02 	call	0x42e	; 0x42e <LCD_sendword>
	
    /* Replace with your application code */
    while (1) 
    {
		LCD_shift(LCD_SHIFT_LEFT);
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	0e 94 34 02 	call	0x468	; 0x468 <LCD_shift>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 508:	2f ef       	ldi	r18, 0xFF	; 255
 50a:	89 e6       	ldi	r24, 0x69	; 105
 50c:	98 e1       	ldi	r25, 0x18	; 24
 50e:	21 50       	subi	r18, 0x01	; 1
 510:	80 40       	sbci	r24, 0x00	; 0
 512:	90 40       	sbci	r25, 0x00	; 0
 514:	e1 f7       	brne	.-8      	; 0x50e <main+0x66>
 516:	00 c0       	rjmp	.+0      	; 0x518 <main+0x70>
 518:	00 00       	nop
		_delay_ms(500);
		LCD_clearscreen();
 51a:	0e 94 2a 02 	call	0x454	; 0x454 <LCD_clearscreen>
 51e:	f1 cf       	rjmp	.-30     	; 0x502 <main+0x5a>

00000520 <_exit>:
 520:	f8 94       	cli

00000522 <__stop_program>:
 522:	ff cf       	rjmp	.-2      	; 0x522 <__stop_program>
